<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Project\Output\uCOS-II-test.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Project\Output\uCOS-II-test.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Tue May 31 10:17:35 2016
<BR><P>
<H3>Maximum Stack Usage =       1344 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; EquipmentComTask &rArr; CSNR_RecDeal &rArr; CarddataOperate &rArr; ReCalPara &rArr; GetMathModelPara &rArr; GetOilBoxModel &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[38e]">__user_initial_stackheap</a>
 <LI><a href="#[74]">OS_CPU_SR_Save</a>
 <LI><a href="#[76]">OS_CPU_SR_Restore</a>
 <LI><a href="#[9c]">OSStartHighRdy</a>
 <LI><a href="#[7a]">OSCtxSw</a>
 <LI><a href="#[98]">OSIntCtxSw</a>
 <LI><a href="#[d]">OS_CPU_PendSVHandler</a>
 <LI><a href="#[429]">IntDisAll</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">NMI_Handler</a><BR>
 <LI><a href="#[7]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">HardFault_Handler</a><BR>
 <LI><a href="#[8]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">MemManage_Handler</a><BR>
 <LI><a href="#[9]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">BusFault_Handler</a><BR>
 <LI><a href="#[a]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">UsageFault_Handler</a><BR>
 <LI><a href="#[b]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">SVC_Handler</a><BR>
 <LI><a href="#[c]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">DebugMon_Handler</a><BR>
 <LI><a href="#[25]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[25]">ADC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[26]">BOD_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[9]">BusFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[31]">CANActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[28]">CAN_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[29]">DMA_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[c]">DebugMon_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[21]">EINT0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[22]">EINT1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[23]">EINT2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[24]">EINT3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2b]">ENET_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[19]">I2C0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1a]">I2C1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1b]">I2C2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2a]">I2S_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2d]">MCPWM_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[8]">MemManage_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[34]">OSTmr_Task</a> from os_tmr.o(.text) referenced from os_tmr.o(.text)
 <LI><a href="#[d]">OS_CPU_PendSVHandler</a> from os_cpu_a.o(OSKernelschedular) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[e]">OS_CPU_SysTickHandler</a> from os_cpu_c.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[87]">OS_TaskIdle</a> from os_core.o(.text) referenced from os_core.o(.text)
 <LI><a href="#[35]">OS_TaskReturn</a> from os_task.o(.text) referenced from os_cpu_c.o(.text)
 <LI><a href="#[80]">OS_TaskStat</a> from os_core.o(.text) referenced from os_core.o(.text)
 <LI><a href="#[1f]">PLL0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2f]">PLL1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[18]">PWM1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2e]">QEI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2c]">RIT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[20]">RTC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1c]">SPI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1d]">SSP0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1e]">SSP1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[b]">SVC_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[32]">SystemInit</a> from system_lpc17xx.o(.text) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[10]">TIMER0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[11]">TIMER1_IRQHandler</a> from speed2.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[12]">TIMER2_IRQHandler</a> from softuart-t3.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[13]">TIMER3_IRQHandler</a> from softuart-t3.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[14]">UART0_IRQHandler</a> from uart0.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[15]">UART1_IRQHandler</a> from uart1.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[16]">UART2_IRQHandler</a> from uart2.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[17]">UART3_IRQHandler</a> from uart3.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[115]">UARTGetChar</a> from debug_frmwrk.o(.text) referenced from debug_frmwrk.o(.text)
 <LI><a href="#[113]">UARTPutChar</a> from debug_frmwrk.o(.text) referenced from debug_frmwrk.o(.text)
 <LI><a href="#[119]">UARTPutDec</a> from debug_frmwrk.o(.text) referenced from debug_frmwrk.o(.text)
 <LI><a href="#[11a]">UARTPutDec16</a> from debug_frmwrk.o(.text) referenced from debug_frmwrk.o(.text)
 <LI><a href="#[11b]">UARTPutDec32</a> from debug_frmwrk.o(.text) referenced from debug_frmwrk.o(.text)
 <LI><a href="#[11c]">UARTPutHex</a> from debug_frmwrk.o(.text) referenced from debug_frmwrk.o(.text)
 <LI><a href="#[11d]">UARTPutHex16</a> from debug_frmwrk.o(.text) referenced from debug_frmwrk.o(.text)
 <LI><a href="#[11e]">UARTPutHex32</a> from debug_frmwrk.o(.text) referenced from debug_frmwrk.o(.text)
 <LI><a href="#[117]">UARTPuts</a> from debug_frmwrk.o(.text) referenced from debug_frmwrk.o(.text)
 <LI><a href="#[118]">UARTPuts_</a> from debug_frmwrk.o(.text) referenced from debug_frmwrk.o(.text)
 <LI><a href="#[30]">USBActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[27]">USB_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[a]">UsageFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[f]">WDT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[39]">__main</a> from __main.o(!!!main) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[38]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[37]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[36]">_sputc</a> from _sputc.o(.text) referenced from c89vsprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[39]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3a]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[3c]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[3ac]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[3ad]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[3ae]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[3af]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[3b0]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[3d]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[381]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[3f]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[41]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[43]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[44]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[3b1]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))

<P><STRONG><a name="[3b2]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[45]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[47]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[48]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[49]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[4b]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[4d]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[4f]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[50]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[51]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[53]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[3b3]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[55]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[57]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[59]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[5b]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[3b4]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[65]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[3b5]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[3b6]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[5d]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[3b7]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[3b8]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[3b9]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[5f]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[3ba]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[3bb]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[60]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[3bc]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[3bd]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[3be]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[3bf]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[3c0]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[3c1]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[3c2]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[3c3]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[3c4]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[3c5]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[3c6]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[3c7]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[3c8]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[6a]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[3c9]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[3ca]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[3cb]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[3cc]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[3cd]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[3ce]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[3b]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[3cf]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[62]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[64]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[3d0]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[66]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; EquipmentComTask &rArr; CSNR_RecDeal &rArr; CarddataOperate &rArr; ReCalPara &rArr; GetMathModelPara &rArr; GetOilBoxModel &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[3d1]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[38f]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[69]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[3d2]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[6b]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[eb]"></a>App_TaskCreateHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_hooks.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
</UL>

<P><STRONG><a name="[ec]"></a>App_TaskDelHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_hooks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
</UL>

<P><STRONG><a name="[ed]"></a>App_TaskIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_hooks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>

<P><STRONG><a name="[ef]"></a>App_TaskStatHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_hooks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
</UL>

<P><STRONG><a name="[f1]"></a>App_TaskSwHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_hooks.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>

<P><STRONG><a name="[f2]"></a>App_TCBInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_hooks.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>

<P><STRONG><a name="[f3]"></a>App_TimeTickHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_hooks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>

<P><STRONG><a name="[ee]"></a>App_TaskReturnHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_hooks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskReturnHook
</UL>

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[6e]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[25]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[38e]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[129]"></a>check_failed</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lpc17xx_libcfg_default.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GlobalGetStatus
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GlobalGetData
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelGetStatus
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelGetData
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelCmd
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IntConfig
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_EdgeStartConfig
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PowerdownCmd
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_BurstCmd
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCmd
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485Config
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FullModemGetStatus
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FullModemConfigMode
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FullModemForcePinState
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IrDAPulseDivConfig
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IrDACmd
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IrDAInvtInputCmd
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ABClearIntPending
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ABCmd
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FIFOConfig
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetIntId
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetLineStatus
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ForceBreak
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveByte
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCaptureValue
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigCapture
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_UpdateMatchValue
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigMatch
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ResetCounter
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearIntCapturePending
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearIntPending
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetIntCaptureStatus
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetIntStatus
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_IntCmd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_Cmd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_DMACmd
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_ClearIntPending
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_GetIntStatus
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_GetRawIntStatusReg
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_GetRawIntStatus
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_IntConfig
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_GetStatus
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_ReceiveData
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_SendData
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_SlaveOutputCmd
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_LoopBackCmd
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Cmd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_GetDataSize
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_DeInit
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSSPclock
</UL>

<P><STRONG><a name="[6f]"></a>GPIO_Test</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gpio_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_Test &rArr; SYSTICK_InternalInit
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_IntCmd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_Cmd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_InternalInit
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d3]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3d4]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3d5]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[36]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> c89vsprintf.o(.text)
</UL>
<P><STRONG><a name="[3d6]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[3d7]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[3d8]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>OS_StrLen</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrNameGet
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameGet
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameGet
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameGet
</UL>

<P><STRONG><a name="[73]"></a>OSEventNameGet</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
</UL>

<P><STRONG><a name="[77]"></a>OSEventNameSet</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[7d]"></a>OS_EventTaskRemoveMulti</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_EventTaskRemoveMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventPendMulti
</UL>

<P><STRONG><a name="[78]"></a>OS_Sched</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventPendMulti
</UL>

<P><STRONG><a name="[7c]"></a>OS_EventTaskWaitMulti</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventPendMulti
</UL>

<P><STRONG><a name="[7b]"></a>OSEventPendMulti</STRONG> (Thumb, 710 bytes, Stack size 64 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWaitMulti
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemoveMulti
</UL>

<P><STRONG><a name="[7e]"></a>OS_TaskStatStkChk</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[80]"></a>OS_TaskStat</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStat &rArr; OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(.text)
</UL>
<P><STRONG><a name="[87]"></a>OS_TaskIdle</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_TaskIdle &rArr; OSTaskIdleHook
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(.text)
</UL>
<P><STRONG><a name="[8b]"></a>OS_MemClr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
</UL>

<P><STRONG><a name="[8d]"></a>OSInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSDebugInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitMisc
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitRdyList
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
</UL>

<P><STRONG><a name="[3d9]"></a>OSIntEnter</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>OSIntExit</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[99]"></a>OSSchedLock</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSSchedLock
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStateGet
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrRemainGet
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrNameGet
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[9a]"></a>OSSchedUnlock</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStateGet
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrRemainGet
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrNameGet
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[9b]"></a>OSStart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>

<P><STRONG><a name="[9d]"></a>OSStatInit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>

<P><STRONG><a name="[9e]"></a>OSTimeTick</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OSTimeTick &rArr; OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[3da]"></a>OSVersion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>OS_Dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[a1]"></a>OS_EventTaskRemove</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>

<P><STRONG><a name="[a0]"></a>OS_EventTaskRdy</STRONG> (Thumb, 132 bytes, Stack size 36 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemoveMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
</UL>

<P><STRONG><a name="[bd]"></a>OS_EventTaskWait</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskWait
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
</UL>

<P><STRONG><a name="[b9]"></a>OS_EventWaitListInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
</UL>

<P><STRONG><a name="[d6]"></a>OS_MemCopy</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
</UL>

<P><STRONG><a name="[a2]"></a>OS_TCBInit</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[a5]"></a>OSFlagAccept</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[a6]"></a>OSFlagCreate</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[a8]"></a>OS_FlagUnlink</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, os_flag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_FlagUnlink
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
</UL>

<P><STRONG><a name="[a9]"></a>OSFlagDel</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[aa]"></a>OSFlagNameGet</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
</UL>

<P><STRONG><a name="[ab]"></a>OSFlagNameSet</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[ac]"></a>OSFlagPend</STRONG> (Thumb, 614 bytes, Stack size 72 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagBlock
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[ae]"></a>OSFlagPendGetFlagsRdy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[af]"></a>OSFlagPost</STRONG> (Thumb, 312 bytes, Stack size 48 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[b0]"></a>OSFlagQuery</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[91]"></a>OS_FlagInit</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[b1]"></a>OSMemCreate</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[b2]"></a>OSMemGet</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[b3]"></a>OSMemNameGet</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
</UL>

<P><STRONG><a name="[b4]"></a>OSMemNameSet</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[b5]"></a>OSMemPut</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[b6]"></a>OSMemQuery</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[92]"></a>OS_MemInit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[b7]"></a>OSQAccept</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[b8]"></a>OSQCreate</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>

<P><STRONG><a name="[ba]"></a>OSQDel</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[bb]"></a>OSQFlush</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[bc]"></a>OSQPend</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[be]"></a>OSQPendAbort</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[bf]"></a>OSQPost</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[c0]"></a>OSQPostFront</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[c1]"></a>OSQPostOpt</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[c2]"></a>OSQQuery</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[93]"></a>OS_QInit</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[c3]"></a>OSSemAccept</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[c4]"></a>OSSemCreate</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[c5]"></a>OSSemDel</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[c6]"></a>OSSemPend</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[c7]"></a>OSSemPendAbort</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[c8]"></a>OSSemPost</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrSignal
</UL>

<P><STRONG><a name="[c9]"></a>OSSemQuery</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[ca]"></a>OSSemSet</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[cb]"></a>OSTaskChangePrio</STRONG> (Thumb, 396 bytes, Stack size 64 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[cc]"></a>OSTaskCreate</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[ce]"></a>OS_TaskStkClr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[85]"></a>OSTaskCreateExt</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStkClr
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
</UL>

<P><STRONG><a name="[cf]"></a>OSTaskDel</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = OSTaskDel &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Dummy
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemoveMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[d2]"></a>OSTaskDelReq</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[d3]"></a>OSTaskNameGet</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
</UL>

<P><STRONG><a name="[86]"></a>OSTaskNameSet</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
</UL>

<P><STRONG><a name="[d4]"></a>OSTaskResume</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[7f]"></a>OSTaskStkChk</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>

<P><STRONG><a name="[82]"></a>OSTaskSuspend</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskSuspend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[d5]"></a>OSTaskQuery</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemCopy
</UL>

<P><STRONG><a name="[d7]"></a>OSTaskRegGet</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[d8]"></a>OSTaskRegSet</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[35]"></a>OS_TaskReturn</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = OS_TaskReturn &rArr; OSTaskDel &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskReturnHook
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_c.o(.text)
</UL>
<P><STRONG><a name="[81]"></a>OSTimeDly</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[da]"></a>OSTimeDlyHMSM</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>

<P><STRONG><a name="[db]"></a>OSTimeDlyResume</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[dc]"></a>OSTimeGet</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
</UL>

<P><STRONG><a name="[dd]"></a>OSTimeSet</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[de]"></a>OSTmrCreate</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Alloc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>

<P><STRONG><a name="[e0]"></a>OSTmrDel</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Free
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>

<P><STRONG><a name="[e3]"></a>OSTmrNameGet</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
</UL>

<P><STRONG><a name="[e4]"></a>OSTmrRemainGet</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>

<P><STRONG><a name="[e5]"></a>OSTmrStateGet</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>

<P><STRONG><a name="[e6]"></a>OSTmrStart</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Link
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>

<P><STRONG><a name="[e8]"></a>OSTmrStop</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>

<P><STRONG><a name="[e9]"></a>OSTmrSignal</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>

<P><STRONG><a name="[94]"></a>OSTmr_Init</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[96]"></a>OSDebugInit</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, os_dbg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[8e]"></a>OSInitHookBegin</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, os_cpu_c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[95]"></a>OSInitHookEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[a4]"></a>OSTaskCreateHook</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, os_cpu_c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskCreateHook
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[d1]"></a>OSTaskDelHook</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskDelHook
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskDelHook
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[88]"></a>OSTaskIdleHook</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskIdleHook
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskIdleHook
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[d9]"></a>OSTaskReturnHook</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskReturnHook
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskReturnHook
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[83]"></a>OSTaskStatHook</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskStatHook
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStatHook
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[cd]"></a>OSTaskStkInit</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, os_cpu_c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[f0]"></a>OSTaskSwHook</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, os_cpu_c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskSwHook
</UL>

<P><STRONG><a name="[a3]"></a>OSTCBInitHook</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, os_cpu_c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[9f]"></a>OSTimeTickHook</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TimeTickHook
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrSignal
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[e]"></a>OS_CPU_SysTickHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = OS_CPU_SysTickHandler &rArr; HoldTask &rArr; HoldLed &rArr; OffLed &rArr; UnLightLed &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HoldTask
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[3db]"></a>OS_CPU_SysTickInit</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, os_cpu_c.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>CirculatesTask</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = CirculatesTask &rArr; Diptask &rArr; CSNR_RecDealDip &rArr; DipModelSet &rArr; GetMathModelPara &rArr; GetOilBoxModel &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedTast
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDipVal
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diptask
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EquipmentComTask
</UL>

<P><STRONG><a name="[f9]"></a>GetPrintfFlg</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = GetPrintfFlg &rArr; GetSysRunPara &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunPara
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfComSysInfo
</UL>

<P><STRONG><a name="[fb]"></a>PrintfComSysInfo</STRONG> (Thumb, 134 bytes, Stack size 72 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = PrintfComSysInfo &rArr; GetPrintfFlg &rArr; GetSysRunPara &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom2
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMySpeed2
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMySpeed1
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMyLocoWorkState
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMyEngRotSpd
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMyDip2Tmp
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMyDip2Den
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMyDip1Tmp
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMyDip1Den
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDip2Hig
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDip1Hig
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPrintfFlg
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>main</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344 + Unknown Stack Size
<LI>Call Chain = main &rArr; EquipmentComTask &rArr; CSNR_RecDeal &rArr; CarddataOperate &rArr; ReCalPara &rArr; GetMathModelPara &rArr; GetOilBoxModel &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreRecTask
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedAndDistTast
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneTaskTimes
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedTast
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitWatchDog
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReadDataDisplayTime
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Test
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrDealTask
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EquipmentComTask
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDipVal
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClaerDisplaySetWithoutStore
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLocoStaTask
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcDip
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfComSysInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[3dc]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 312 bytes, Stack size 0 bytes, system_lpc17xx.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>SystemInit</STRONG> (Thumb, 296 bytes, Stack size 0 bytes, system_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(.text)
</UL>
<P><STRONG><a name="[113]"></a>UARTPutChar</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UARTPutChar &rArr; UART_Send &rArr; UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutHex32
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutHex16
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutHex
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutDec32
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutDec16
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutDec
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(.text)
</UL>
<P><STRONG><a name="[115]"></a>UARTGetChar</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UARTGetChar &rArr; UART_Receive &rArr; UART_ReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(.text)
</UL>
<P><STRONG><a name="[117]"></a>UARTPuts</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UARTPuts &rArr; UARTPutChar &rArr; UART_Send &rArr; UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutHex32
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutHex16
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutHex
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts_
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCOM0s
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCOM3s
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCOM2s
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCOM1s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(.text)
</UL>
<P><STRONG><a name="[118]"></a>UARTPuts_</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UARTPuts_ &rArr; UARTPuts &rArr; UARTPutChar &rArr; UART_Send &rArr; UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(.text)
</UL>
<P><STRONG><a name="[119]"></a>UARTPutDec</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UARTPutDec &rArr; UARTPutChar &rArr; UART_Send &rArr; UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(.text)
</UL>
<P><STRONG><a name="[11a]"></a>UARTPutDec16</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UARTPutDec16 &rArr; UARTPutChar &rArr; UART_Send &rArr; UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(.text)
</UL>
<P><STRONG><a name="[11b]"></a>UARTPutDec32</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = UARTPutDec32 &rArr; UARTPutChar &rArr; UART_Send &rArr; UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(.text)
</UL>
<P><STRONG><a name="[11c]"></a>UARTPutHex</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UARTPutHex &rArr; UARTPuts &rArr; UARTPutChar &rArr; UART_Send &rArr; UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(.text)
</UL>
<P><STRONG><a name="[11d]"></a>UARTPutHex16</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UARTPutHex16 &rArr; UARTPuts &rArr; UARTPutChar &rArr; UART_Send &rArr; UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(.text)
</UL>
<P><STRONG><a name="[11e]"></a>UARTPutHex32</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UARTPutHex32 &rArr; UARTPuts &rArr; UARTPutChar &rArr; UART_Send &rArr; UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(.text)
</UL>
<P><STRONG><a name="[fd]"></a>printfcom0</STRONG> (Thumb, 68 bytes, Stack size 288 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCOM0
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneTaskTimes
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunPara
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcDip
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfComSysInfo
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncDisplay
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrinfSysInfo
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DipModelSet
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreSetModelVal
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAddSpeed
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time3Init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time0Init
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAdc
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreCurEvtFlg
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreHostErrFlg
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreDipErrFlg
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrLedIndicate
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L1602_WR
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCard
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDipMathVal
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreData
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOilBoxModel
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfTime
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTemp
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreFixInfo
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAddDipVal
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreAddDipVal
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreReviseHight
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreDensity
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadOilBoxModel
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLstRedFlshRecNum_gprs
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLstRedFlshRecNum
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLstRedFlshRecNum_gprs
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLstRedFlshRecNum
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSNR_RecDealHostDip
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HdlcSendDeal
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreCurFlshRecNum
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadReviseHight
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFixInfo
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDensity
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurFlshRecNum
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDist
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDistFram
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSNR_RecDeal
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarddataOperate
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSendData
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetModel
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHight
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDen
</UL>

<P><STRONG><a name="[108]"></a>printfcom2</STRONG> (Thumb, 68 bytes, Stack size 288 bytes, debug_frmwrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = printfcom2 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCOM2
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfComSysInfo
</UL>

<P><STRONG><a name="[123]"></a>debug_frmwrk_init</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, debug_frmwrk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ConfigStructInit
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
</UL>

<P><STRONG><a name="[128]"></a>ADC_Init</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lpc17xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ADC_Init &rArr; CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetPCLK
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAdc
</UL>

<P><STRONG><a name="[12c]"></a>ADC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lpc17xx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
</UL>

<P><STRONG><a name="[3dd]"></a>ADC_GetData</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lpc17xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>ADC_StartCmd</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lpc17xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_StartCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAdc
</UL>

<P><STRONG><a name="[12e]"></a>ADC_BurstCmd</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lpc17xx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[12f]"></a>ADC_PowerdownCmd</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lpc17xx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[130]"></a>ADC_EdgeStartConfig</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lpc17xx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[131]"></a>ADC_IntConfig</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lpc17xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAdc
</UL>

<P><STRONG><a name="[132]"></a>ADC_ChannelCmd</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lpc17xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_ChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAdc
</UL>

<P><STRONG><a name="[133]"></a>ADC_ChannelGetData</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lpc17xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_ChannelGetData
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAdc
</UL>

<P><STRONG><a name="[134]"></a>ADC_ChannelGetStatus</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lpc17xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_ChannelGetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAdc
</UL>

<P><STRONG><a name="[135]"></a>ADC_GlobalGetData</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lpc17xx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[136]"></a>ADC_GlobalGetStatus</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lpc17xx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[157]"></a>CLKPWR_SetPCLKDiv</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, lpc17xx_clkpwr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLKPWR_SetPCLKDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_SetTimeOut
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
</UL>

<P><STRONG><a name="[137]"></a>CLKPWR_GetPCLKSEL</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetPCLK
</UL>

<P><STRONG><a name="[12b]"></a>CLKPWR_GetPCLK</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lpc17xx_clkpwr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetPCLKSEL
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPClock
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSSPclock
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time3Init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time0Init
</UL>

<P><STRONG><a name="[12a]"></a>CLKPWR_ConfigPPWR</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_DeInit
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
</UL>

<P><STRONG><a name="[3de]"></a>CLKPWR_Sleep</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(.text), UNUSED)

<P><STRONG><a name="[3df]"></a>CLKPWR_DeepSleep</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(.text), UNUSED)

<P><STRONG><a name="[3e0]"></a>CLKPWR_PowerDown</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(.text), UNUSED)

<P><STRONG><a name="[3e1]"></a>CLKPWR_DeepPowerDown</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(.text), UNUSED)

<P><STRONG><a name="[3e2]"></a>PINSEL_ConfigTraceFunc</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lpc17xx_pinsel.o(.text), UNUSED)

<P><STRONG><a name="[3e3]"></a>PINSEL_SetI2C0Pins</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc17xx_pinsel.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>PINSEL_ConfigPin</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lpc17xx_pinsel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PINSEL_ConfigPin &rArr; set_ResistorMode
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_OpenDrainMode
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ResistorMode
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_PinFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_frmwrk_init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinselConfig
</UL>

<P><STRONG><a name="[13c]"></a>SSP_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lpc17xx_ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SSP_Init &rArr; setSSPclock &rArr; CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSSPclock
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_Init
</UL>

<P><STRONG><a name="[13d]"></a>SSP_DeInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lpc17xx_ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
</UL>

<P><STRONG><a name="[13e]"></a>SSP_GetDataSize</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lpc17xx_ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_ReadWrite
</UL>

<P><STRONG><a name="[300]"></a>SSP_ConfigStructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lpc17xx_ssp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_Init
</UL>

<P><STRONG><a name="[13f]"></a>SSP_Cmd</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lpc17xx_ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SSP_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_Init
</UL>

<P><STRONG><a name="[140]"></a>SSP_LoopBackCmd</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lpc17xx_ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[141]"></a>SSP_SlaveOutputCmd</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lpc17xx_ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[142]"></a>SSP_SendData</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lpc17xx_ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_ReadWrite
</UL>

<P><STRONG><a name="[143]"></a>SSP_ReceiveData</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lpc17xx_ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_ReadWrite
</UL>

<P><STRONG><a name="[144]"></a>SSP_ReadWrite</STRONG> (Thumb, 590 bytes, Stack size 56 bytes, lpc17xx_ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_ReceiveData
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_SendData
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_GetDataSize
</UL>

<P><STRONG><a name="[145]"></a>SSP_GetStatus</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lpc17xx_ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[146]"></a>SSP_IntConfig</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lpc17xx_ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[147]"></a>SSP_GetRawIntStatus</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lpc17xx_ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[148]"></a>SSP_GetRawIntStatusReg</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lpc17xx_ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[149]"></a>SSP_GetIntStatus</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lpc17xx_ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[14a]"></a>SSP_ClearIntPending</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lpc17xx_ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[14b]"></a>SSP_DMACmd</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lpc17xx_ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[70]"></a>SYSTICK_InternalInit</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lpc17xx_systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SYSTICK_InternalInit
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Test
</UL>

<P><STRONG><a name="[14e]"></a>SYSTICK_ExternalInit</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, lpc17xx_systick.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[71]"></a>SYSTICK_Cmd</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lpc17xx_systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSTICK_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Test
</UL>

<P><STRONG><a name="[72]"></a>SYSTICK_IntCmd</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lpc17xx_systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSTICK_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Test
</UL>

<P><STRONG><a name="[3e4]"></a>SYSTICK_GetCurrentValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpc17xx_systick.o(.text), UNUSED)

<P><STRONG><a name="[3e5]"></a>SYSTICK_ClearCounterFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc17xx_systick.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>TIM_GetIntStatus</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lpc17xx_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[153]"></a>TIM_GetIntCaptureStatus</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lpc17xx_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_GetIntCaptureStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[154]"></a>TIM_ClearIntPending</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lpc17xx_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_ClearIntPending
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
</UL>

<P><STRONG><a name="[155]"></a>TIM_ClearIntCapturePending</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lpc17xx_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_ClearIntCapturePending
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[3e6]"></a>TIM_ConfigStructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lpc17xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>TIM_Init</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, lpc17xx_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TIM_Init &rArr; converUSecToVal &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;converPtrToTimeNum
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;converUSecToVal
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_SetPCLKDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time3Init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time2Init
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time1Init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time0Init
</UL>

<P><STRONG><a name="[159]"></a>TIM_DeInit</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, lpc17xx_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
</UL>

<P><STRONG><a name="[15a]"></a>TIM_Cmd</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lpc17xx_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time3Init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time2Init
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time1Init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time0Init
</UL>

<P><STRONG><a name="[15b]"></a>TIM_ResetCounter</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lpc17xx_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ResetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time3Init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time2Init
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time1Init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time0Init
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[15c]"></a>TIM_ConfigMatch</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, lpc17xx_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_ConfigMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time3Init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time0Init
</UL>

<P><STRONG><a name="[15d]"></a>TIM_UpdateMatchValue</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lpc17xx_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[15e]"></a>TIM_ConfigCapture</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, lpc17xx_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_ConfigCapture
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time2Init
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time1Init
</UL>

<P><STRONG><a name="[15f]"></a>TIM_GetCaptureValue</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lpc17xx_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_GetCaptureValue
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[126]"></a>UART_Init</STRONG> (Thumb, 482 bytes, Stack size 16 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = UART_Init &rArr; uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_frmwrk_init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Init
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3Init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCOM1Bout
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
</UL>

<P><STRONG><a name="[127]"></a>UART_TxCmd</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_TxCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_frmwrk_init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Init
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3Init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCOM1Bout
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
</UL>

<P><STRONG><a name="[161]"></a>UART_DeInit</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
</UL>

<P><STRONG><a name="[125]"></a>UART_ConfigStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_frmwrk_init
</UL>

<P><STRONG><a name="[162]"></a>UART_SendByte</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
</UL>

<P><STRONG><a name="[163]"></a>UART_ReceiveByte</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_ReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive
</UL>

<P><STRONG><a name="[114]"></a>UART_Send</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART_Send &rArr; UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCOM2
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCOM0
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485Send
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCOM3
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCOM1
</UL>

<P><STRONG><a name="[116]"></a>UART_Receive</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_Receive &rArr; UART_ReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGetChar
</UL>

<P><STRONG><a name="[164]"></a>UART_ForceBreak</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[165]"></a>UART_IntConfig</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Init
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3Init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCOM1Bout
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
</UL>

<P><STRONG><a name="[166]"></a>UART_GetLineStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_GetLineStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUart0Status
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUart3Status
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUART2Status
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUART1Status
</UL>

<P><STRONG><a name="[167]"></a>UART_GetIntId</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[3e7]"></a>UART_CheckBusy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>UART_FIFOConfig</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_FIFOConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Init
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3Init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCOM1Bout
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
</UL>

<P><STRONG><a name="[3e8]"></a>UART_FIFOConfigStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>UART_ABCmd</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[16a]"></a>UART_ABClearIntPending</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[16b]"></a>UART_IrDAInvtInputCmd</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[16c]"></a>UART_IrDACmd</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[16d]"></a>UART_IrDAPulseDivConfig</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[16e]"></a>UART_FullModemForcePinState</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[16f]"></a>UART_FullModemConfigMode</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[170]"></a>UART_FullModemGetStatus</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[171]"></a>UART_RS485Config</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[3e9]"></a>UART_RS485ReceiverCmd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>UART_RS485Send</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485SendData
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485SendSlvAddr
</UL>

<P><STRONG><a name="[173]"></a>UART_RS485SendSlvAddr</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485Send
</UL>

<P><STRONG><a name="[174]"></a>UART_RS485SendData</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485Send
</UL>

<P><STRONG><a name="[176]"></a>WDT_Init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lpc17xx_wdt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WDT_Init &rArr; CLKPWR_SetPCLKDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_SetPCLKDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitWatchDog
</UL>

<P><STRONG><a name="[178]"></a>WDT_Feed</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc17xx_wdt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_UpdateTimeOut
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Start
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedDog
</UL>

<P><STRONG><a name="[177]"></a>WDT_Start</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lpc17xx_wdt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = WDT_Start &rArr; WDT_SetTimeOut &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_SetTimeOut
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitWatchDog
</UL>

<P><STRONG><a name="[3ea]"></a>WDT_ReadTimeOutFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lpc17xx_wdt.o(.text), UNUSED)

<P><STRONG><a name="[3eb]"></a>WDT_ClrTimeOutFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc17xx_wdt.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>WDT_UpdateTimeOut</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lpc17xx_wdt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_SetTimeOut
</UL>

<P><STRONG><a name="[3ec]"></a>WDT_GetCurrentCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpc17xx_wdt.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>GPIO_SetDir</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_SetDir
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOrClearValue
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadIoVal
</UL>

<P><STRONG><a name="[17c]"></a>GPIO_SetValue</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_SetValue
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOrClearValue
</UL>

<P><STRONG><a name="[17d]"></a>GPIO_ClearValue</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ClearValue
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOrClearValue
</UL>

<P><STRONG><a name="[17e]"></a>GPIO_ReadValue</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_ReadValue
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ReadValue
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadIoVal
</UL>

<P><STRONG><a name="[184]"></a>GPIO_IntCmd</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_IntCmd
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGpiosoftRxd
</UL>

<P><STRONG><a name="[186]"></a>GPIO_GetIntStatus</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_GetIntStatus
</UL>

<P><STRONG><a name="[188]"></a>GPIO_ClearInt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ClearInt
</UL>

<P><STRONG><a name="[17f]"></a>FIO_SetDir</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
</UL>

<P><STRONG><a name="[180]"></a>FIO_SetValue</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>

<P><STRONG><a name="[181]"></a>FIO_ClearValue</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>

<P><STRONG><a name="[182]"></a>FIO_ReadValue</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
</UL>

<P><STRONG><a name="[183]"></a>FIO_IntCmd</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IntCmd
</UL>

<P><STRONG><a name="[185]"></a>FIO_GetIntStatus</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetIntStatus
</UL>

<P><STRONG><a name="[187]"></a>FIO_ClearInt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearInt
</UL>

<P><STRONG><a name="[189]"></a>FIO_SetMask</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>

<P><STRONG><a name="[18a]"></a>FIO_HalfWordSetDir</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordGetPointer
</UL>

<P><STRONG><a name="[18c]"></a>FIO_HalfWordSetMask</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordGetPointer
</UL>

<P><STRONG><a name="[18d]"></a>FIO_HalfWordSetValue</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordGetPointer
</UL>

<P><STRONG><a name="[18e]"></a>FIO_HalfWordClearValue</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordGetPointer
</UL>

<P><STRONG><a name="[18f]"></a>FIO_HalfWordReadValue</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordGetPointer
</UL>

<P><STRONG><a name="[190]"></a>FIO_ByteSetDir</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteGetPointer
</UL>

<P><STRONG><a name="[192]"></a>FIO_ByteSetMask</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteGetPointer
</UL>

<P><STRONG><a name="[193]"></a>FIO_ByteSetValue</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteGetPointer
</UL>

<P><STRONG><a name="[194]"></a>FIO_ByteClearValue</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteGetPointer
</UL>

<P><STRONG><a name="[195]"></a>FIO_ByteReadValue</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteGetPointer
</UL>

<P><STRONG><a name="[196]"></a>WriteSoftSpiCSF</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mx25l1602drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WriteSoftSpiCSF &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nop
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOrClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CE_High
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CE_Low
</UL>

<P><STRONG><a name="[199]"></a>CE_Low</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mx25l1602drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CE_Low &rArr; WriteSoftSpiCSF &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoftSpiCSF
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L1602_WR
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L1602_Erase
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L1602_RdID
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L1602_RD
</UL>

<P><STRONG><a name="[19a]"></a>CE_High</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mx25l1602drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CE_High &rArr; WriteSoftSpiCSF &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoftSpiCSF
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L1602_WR
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L1602_Erase
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L1602_RdID
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L1602_RD
</UL>

<P><STRONG><a name="[19b]"></a>InitFlashIO</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, mx25l1602drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = InitFlashIO &rArr; GPIO_PinselConfig &rArr; PINSEL_ConfigPin &rArr; set_ResistorMode
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinselConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneTask
</UL>

<P><STRONG><a name="[19d]"></a>WriteSCKF</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mx25l1602drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WriteSCKF &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nop
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOrClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOrRecByte_SPIF
</UL>

<P><STRONG><a name="[19e]"></a>ReadSCKF</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mx25l1602drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nop
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadIoVal
</UL>

<P><STRONG><a name="[1a0]"></a>WriteMOSIF</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mx25l1602drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WriteMOSIF &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nop
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOrClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOrRecByte_SPIF
</UL>

<P><STRONG><a name="[1a1]"></a>ReadMOSIF</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mx25l1602drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nop
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadIoVal
</UL>

<P><STRONG><a name="[1a2]"></a>WriteMISOF</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mx25l1602drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nop
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOrClearValue
</UL>

<P><STRONG><a name="[1a3]"></a>ReadMISOF</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mx25l1602drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ReadMISOF &rArr; GPIO_ReadIoVal &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nop
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadIoVal
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOrRecByte_SPIF
</UL>

<P><STRONG><a name="[1a4]"></a>SendOrRecByte_SPIF</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, mx25l1602drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SendOrRecByte_SPIF &rArr; ReadMISOF &rArr; GPIO_ReadIoVal &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMISOF
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMOSIF
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSCKF
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecByte_SPIF
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendByte_SPIF
</UL>

<P><STRONG><a name="[1a5]"></a>SendByte_SPIF</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mx25l1602drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SendByte_SPIF &rArr; SendOrRecByte_SPIF &rArr; ReadMISOF &rArr; GPIO_ReadIoVal &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOrRecByte_SPIF
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Byte
</UL>

<P><STRONG><a name="[1a6]"></a>RecByte_SPIF</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mx25l1602drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RecByte_SPIF &rArr; SendOrRecByte_SPIF &rArr; ReadMISOF &rArr; GPIO_ReadIoVal &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOrRecByte_SPIF
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Byte
</UL>

<P><STRONG><a name="[3ed]"></a>SPIInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mx25l1602drv.o(.text), UNUSED)

<P><STRONG><a name="[1a7]"></a>Send_Byte</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mx25l1602drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Send_Byte &rArr; SendByte_SPIF &rArr; SendOrRecByte_SPIF &rArr; ReadMISOF &rArr; GPIO_ReadIoVal &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendByte_SPIF
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L1602_WR
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L1602_Erase
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L1602_RdID
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L1602_RD
</UL>

<P><STRONG><a name="[1a8]"></a>Get_Byte</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mx25l1602drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Get_Byte &rArr; RecByte_SPIF &rArr; SendOrRecByte_SPIF &rArr; ReadMISOF &rArr; GPIO_ReadIoVal &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecByte_SPIF
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L1602_WR
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L1602_Erase
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L1602_RdID
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L1602_RD
</UL>

<P><STRONG><a name="[1a9]"></a>MX25L1602_RD</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, mx25l1602drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX25L1602_RD &rArr; Get_Byte &rArr; RecByte_SPIF &rArr; SendOrRecByte_SPIF &rArr; ReadMISOF &rArr; GPIO_ReadIoVal &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Byte
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Byte
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CE_High
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CE_Low
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlsh
</UL>

<P><STRONG><a name="[1aa]"></a>MX25L1602_RdID</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, mx25l1602drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX25L1602_RdID &rArr; Get_Byte &rArr; RecByte_SPIF &rArr; SendOrRecByte_SPIF &rArr; ReadMISOF &rArr; GPIO_ReadIoVal &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Byte
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Byte
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CE_High
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CE_Low
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeFlashIDErrFlg
</UL>

<P><STRONG><a name="[1ab]"></a>MX25L1602_Erase</STRONG> (Thumb, 504 bytes, Stack size 40 bytes, mx25l1602drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MX25L1602_Erase &rArr; Get_Byte &rArr; RecByte_SPIF &rArr; SendOrRecByte_SPIF &rArr; ReadMISOF &rArr; GPIO_ReadIoVal &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Byte
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Byte
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CE_High
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CE_Low
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L1602_WR
</UL>

<P><STRONG><a name="[1ac]"></a>MX25L1602_WR</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, mx25l1602drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = MX25L1602_WR &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L1602_Erase
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Byte
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Byte
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CE_High
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CE_Low
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlsh
</UL>

<P><STRONG><a name="[1ad]"></a>JudgeFlashIDErrFlg</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, mx25l1602drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = JudgeFlashIDErrFlg &rArr; MX25L1602_RdID &rArr; Get_Byte &rArr; RecByte_SPIF &rArr; SendOrRecByte_SPIF &rArr; ReadMISOF &rArr; GPIO_ReadIoVal &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L1602_RdID
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHostError
</UL>

<P><STRONG><a name="[3ee]"></a>myDelay</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gpio_app.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>GetSysTime</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gpio_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = GetSysTime &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedAndDistTast
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedTast
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrDealTask
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EquipmentComTask
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDipVal
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLocoStaTask
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcDip
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfComSysInfo
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncDisplay
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSNR_RecDealDip
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostScanDip
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DipComOperate
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeDipPrsDif
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeDip2Prs
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeDip1Prs
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCOM0Data
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReadCOM0DataCod
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManageLedFlg
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HdlcDeal
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestSoftCOM
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAdc
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HoldCOM0ConnSta
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvtDealSys
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnLed
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeFramWordEvt
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeEr2450Err
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrDealSys
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrDisplayIndicate
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HoldCOM3ConnSta
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HoldCOM2ConnSta
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HoldCOM1ConnSta
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayX10ms
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeFlashIDErrFlg
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDipPrs30SecVal
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreDataPro
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfTime
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayContrl
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSNR_RecDealHostDip
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HdlcSendDeal
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HdlcRecDeal
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecTAX2Info
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HoldLed
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSpeedPlusecs
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSpeedPluse2
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSpeedPluse1
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostScan
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSNR_RecDeal
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarddataOperate
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpandCard
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperationCard
</UL>

<P><STRONG><a name="[1ae]"></a>DelayX10ms</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gpio_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = DelayX10ms &rArr; GetSysTime &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedDog
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDipVal
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTime
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrinfSysInfo
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCard
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicateRecordFinsh
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicateUSBFlgErr
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicateWriteCardFlgErr
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicateWriteCardFinsh
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlugICCard
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MovDisplayChar
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLed
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHight
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HightCard
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpandCard
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperationCard
</UL>

<P><STRONG><a name="[197]"></a>GPIO_SetOrClearValue</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, gpio_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSoftCOM
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritesSoftTxc
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritesSoftTxd
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEN_485_0
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEN_485_3
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEN_485_2
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEN_485_1
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMISOF
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMOSIF
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSCKF
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoftSpiCSF
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteIC_SWT
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteIC_RST
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCS_IC
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePOW_IC
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoftSpiCSIC
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMISO_IC
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMOSI_IC
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSCK_IC
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoftSpiCS0
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMISO0
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMOSI0
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSCK0
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSDA
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSCL
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightLed
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLightLed
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoftSpiCS1
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMISO1
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMOSI1
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSCK1
</UL>

<P><STRONG><a name="[19c]"></a>GPIO_PinselConfig</STRONG> (Thumb, 66 bytes, Stack size 48 bytes, gpio_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = GPIO_PinselConfig &rArr; PINSEL_ConfigPin &rArr; set_ResistorMode
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSoftCOM
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time2Init
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time1Init
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAdc
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Init
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3Init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCOM1Bout
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFlashIO
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteIC_RST
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCS_IC
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMISO0
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFlshIO
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitIOForSPI1
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLed
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFramIO
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCardIO
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLocoStaIO
</UL>

<P><STRONG><a name="[19f]"></a>GPIO_ReadIoVal</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, gpio_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GPIO_ReadIoVal &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSoftRxdcp
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMISOF
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMOSIF
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSCKF
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadIC_SWT
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMISO_IC
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMOSI_IC
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSCK_IC
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMISO0
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMOSI0
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSCK0
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSDA
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSCL
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMISO1
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMOSI1
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSCK1
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLOCO_BK
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLOCO_ZD
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLOCO_QY
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLOCO_LW
</UL>

<P><STRONG><a name="[1b1]"></a>WriteEN_485_1</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WriteEN_485_1 &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOrClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCOM1
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCOM1Bout
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
</UL>

<P><STRONG><a name="[15]"></a>UART1_IRQHandler</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = UART1_IRQHandler &rArr; WriteFIFO &rArr; GetNoWriteSizeFIFO &rArr; GetNoReadSizeFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFIFO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1b3]"></a>HoldCOM1ConnSta</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = HoldCOM1ConnSta &rArr; GetSysTime &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCOM1EndFlg
</UL>

<P><STRONG><a name="[1b5]"></a>GetCOM1FramRecEndFlg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCOM1EndFlg
</UL>

<P><STRONG><a name="[1b7]"></a>ClearCOM1FramRecEndFlg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearCOM1EndFlg
</UL>

<P><STRONG><a name="[1b4]"></a>GetCOM1EndFlg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = GetCOM1EndFlg &rArr; HoldCOM1ConnSta &rArr; GetSysTime &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCOM1FramRecEndFlg
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HoldCOM1ConnSta
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFramRecEndFlgDip
</UL>

<P><STRONG><a name="[1b6]"></a>ClearCOM1EndFlg</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ClearCOM1EndFlg
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearCOM1FramRecEndFlg
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearFramRecEndFlgDip
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearFramRecEndFlg
</UL>

<P><STRONG><a name="[1b8]"></a>UART1Init</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = UART1Init &rArr; UART_Init &rArr; uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FIFOConfig
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFIFO
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEN_485_1
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinselConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneTask
</UL>

<P><STRONG><a name="[1bc]"></a>SetCOM1Bout</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SetCOM1Bout &rArr; UART_Init &rArr; uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FIFOConfig
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFIFO
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEN_485_1
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinselConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HdlcDeal
</UL>

<P><STRONG><a name="[1bd]"></a>ReadCOM1</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ReadCOM1 &rArr; ReadFIFO &rArr; GetNoReadSizeFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFIFO
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNoReadSizeFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRs485DataDip
</UL>

<P><STRONG><a name="[1c0]"></a>ReadCOM1NoClear</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, uart1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnlyReadFIFO
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNoReadSizeFIFO
</UL>

<P><STRONG><a name="[1c2]"></a>GetUART1Status</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetUART1Status &rArr; UART_GetLineStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetLineStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCOM1
</UL>

<P><STRONG><a name="[1c3]"></a>SendCOM1</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SendCOM1 &rArr; UART_Send &rArr; UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUART1Status
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEN_485_1
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataSend_CSNR
</UL>

<P><STRONG><a name="[1c4]"></a>SendCOM1s</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uart1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
</UL>

<P><STRONG><a name="[1c5]"></a>WriteEN_485_2</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WriteEN_485_2 &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOrClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCOM2
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Init
</UL>

<P><STRONG><a name="[16]"></a>UART2_IRQHandler</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, uart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = UART2_IRQHandler &rArr; WriteFIFO &rArr; GetNoWriteSizeFIFO &rArr; GetNoReadSizeFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFIFO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1c6]"></a>HoldCOM2ConnSta</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, uart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = HoldCOM2ConnSta &rArr; GetSysTime &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCOM2EndFlg
</UL>

<P><STRONG><a name="[1c8]"></a>GetCOM2FramRecEndFlg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCOM2EndFlg
</UL>

<P><STRONG><a name="[1ca]"></a>ClearCOM2FramRecEndFlg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearCOM2EndFlg
</UL>

<P><STRONG><a name="[1c7]"></a>GetCOM2EndFlg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = GetCOM2EndFlg &rArr; HoldCOM2ConnSta &rArr; GetSysTime &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCOM2FramRecEndFlg
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HoldCOM2ConnSta
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFramRecEndFlgCom2
</UL>

<P><STRONG><a name="[1c9]"></a>ClearCOM2EndFlg</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, uart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ClearCOM2EndFlg
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearCOM2FramRecEndFlg
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearFramRecEndFlgCom2
</UL>

<P><STRONG><a name="[1cb]"></a>UART2Init</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, uart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = UART2Init &rArr; UART_Init &rArr; uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FIFOConfig
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEN_485_2
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFIFO
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinselConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneTask
</UL>

<P><STRONG><a name="[1cc]"></a>ReadCOM2</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, uart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ReadCOM2 &rArr; ReadFIFO &rArr; GetNoReadSizeFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFIFO
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNoReadSizeFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecTAX2Info
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRs485DataCom2
</UL>

<P><STRONG><a name="[1cd]"></a>ReadCOM2NoClear</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, uart2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnlyReadFIFO
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNoReadSizeFIFO
</UL>

<P><STRONG><a name="[1ce]"></a>GetUART2Status</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetUART2Status &rArr; UART_GetLineStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetLineStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCOM2
</UL>

<P><STRONG><a name="[122]"></a>SendCOM2</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, uart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SendCOM2 &rArr; UART_Send &rArr; UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUART2Status
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEN_485_2
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom2
</UL>

<P><STRONG><a name="[1cf]"></a>SendCOM2s</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uart2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
</UL>

<P><STRONG><a name="[1d0]"></a>WriteEN_485_3</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WriteEN_485_3 &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOrClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCOM3
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3Init
</UL>

<P><STRONG><a name="[17]"></a>UART3_IRQHandler</STRONG> (Thumb, 342 bytes, Stack size 8 bytes, uart3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = UART3_IRQHandler &rArr; WriteFIFO &rArr; GetNoWriteSizeFIFO &rArr; GetNoReadSizeFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFIFO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1d1]"></a>HoldCOM3ConnSta</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, uart3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = HoldCOM3ConnSta &rArr; GetSysTime &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCOM3EndFlg
</UL>

<P><STRONG><a name="[1d3]"></a>GetCOM3FramRecEndFlg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCOM3EndFlg
</UL>

<P><STRONG><a name="[1d5]"></a>ClearCOM3FramRecEndFlg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearCOM3EndFlg
</UL>

<P><STRONG><a name="[1d2]"></a>GetCOM3EndFlg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uart3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = GetCOM3EndFlg &rArr; HoldCOM3ConnSta &rArr; GetSysTime &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCOM3FramRecEndFlg
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HoldCOM3ConnSta
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFramRecEndFlgCom3
</UL>

<P><STRONG><a name="[1d4]"></a>ClearCOM3EndFlg</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, uart3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ClearCOM3EndFlg
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearCOM3FramRecEndFlg
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearFramRecEndFlgCom3
</UL>

<P><STRONG><a name="[1d6]"></a>UART3Init</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, uart3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = UART3Init &rArr; UART_Init &rArr; uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FIFOConfig
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEN_485_3
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFIFO
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinselConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneTask
</UL>

<P><STRONG><a name="[1d7]"></a>ReadCOM3</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, uart3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ReadCOM3 &rArr; ReadFIFO &rArr; GetNoReadSizeFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFIFO
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNoReadSizeFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRs485DataCom3
</UL>

<P><STRONG><a name="[1d8]"></a>ReadCOM3NoClear</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, uart3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnlyReadFIFO
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNoReadSizeFIFO
</UL>

<P><STRONG><a name="[1d9]"></a>GetUart3Status</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetLineStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCOM3
</UL>

<P><STRONG><a name="[1da]"></a>SendCOM3</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, uart3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUart3Status
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEN_485_3
</UL>

<P><STRONG><a name="[1db]"></a>SendCOM3s</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uart3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
</UL>

<P><STRONG><a name="[3ef]"></a>GetCom3FramRecEndFlg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart3.o(.text), UNUSED)

<P><STRONG><a name="[3f0]"></a>ClearCom3FramRecEndFlg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart3.o(.text), UNUSED)

<P><STRONG><a name="[1dc]"></a>InitErrDealSys</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uart0001.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitErrDealSys
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneTaskTimes
</UL>

<P><STRONG><a name="[1dd]"></a>StoreErrFlg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uart0001.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = StoreErrFlg &rArr; WriteFIFO &rArr; GetNoWriteSizeFIFO &rArr; GetNoReadSizeFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreHostErrFlg
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreDipErrFlg
</UL>

<P><STRONG><a name="[1de]"></a>GetErrorCode</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, uart0001.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = GetErrorCode &rArr; ReadFIFO &rArr; GetNoReadSizeFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFIFO
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNoReadSizeFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreData
</UL>

<P><STRONG><a name="[1df]"></a>StoreCurErrFlg</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, uart0001.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFIFO
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFIFO
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnlyReadFIFO
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNoReadSizeFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrDealSys
</UL>

<P><STRONG><a name="[1e0]"></a>ErrDisplayIndicate</STRONG> (Thumb, 446 bytes, Stack size 48 bytes, uart0001.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnLed
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OffLed
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySet
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnlyReadFIFO
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNoReadSizeFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrIndicate
</UL>

<P><STRONG><a name="[1e4]"></a>ErrLedIndicate</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, uart0001.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnLed
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OffLed
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnlyReadFIFO
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNoReadSizeFIFO
</UL>

<P><STRONG><a name="[1e5]"></a>GetStoreErrTypCod</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, uart0001.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFIFO
</UL>

<P><STRONG><a name="[1e6]"></a>ErrIndicate</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, uart0001.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrDisplayIndicate
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrDealSys
</UL>

<P><STRONG><a name="[1e7]"></a>JudgeHostError</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, uart0001.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = JudgeHostError &rArr; JudgeEr2450Err &rArr; GetBotVolt &rArr; ReadAdc &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeFramWordEvt
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeEr2450Err
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeFlashIDErrFlg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreHostErrFlg
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrDealSys
</UL>

<P><STRONG><a name="[1ea]"></a>ErrDealSys</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, uart0001.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeTAX2Error
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeDip2Error
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeDip1Error
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeCardError
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHostError
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrIndicate
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreCurErrFlg
</UL>

<P><STRONG><a name="[2de]"></a>GetHostErrNum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart0001.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreData
</UL>

<P><STRONG><a name="[1f4]"></a>ErrTimesAdd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart0001.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreHostErrFlg
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreDipErrFlg
</UL>

<P><STRONG><a name="[1f5]"></a>ErrTimesDec</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart0001.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreHostErrFlg
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreDipErrFlg
</UL>

<P><STRONG><a name="[1f3]"></a>GetDipErrFlg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart0001.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDipVal
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreDipErrFlg
</UL>

<P><STRONG><a name="[1ef]"></a>JudgeDipError</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, uart0001.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = JudgeDipError
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCom1Dip2ErrFlg
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCom1Dip1ErrFlg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreDipErrFlg
</UL>

<P><STRONG><a name="[1f2]"></a>StoreDipErrFlg</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, uart0001.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = StoreDipErrFlg &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeDipError
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDipErrFlg
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrTimesDec
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrTimesAdd
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreErrFlg
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrDealTask
</UL>

<P><STRONG><a name="[261]"></a>GetHostErrFlg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart0001.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDipVal
</UL>

<P><STRONG><a name="[1f6]"></a>StoreHostErrFlg</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, uart0001.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = StoreHostErrFlg &rArr; JudgeHostError &rArr; JudgeEr2450Err &rArr; GetBotVolt &rArr; ReadAdc &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrTimesDec
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrTimesAdd
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHostError
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreErrFlg
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrDealTask
</UL>

<P><STRONG><a name="[110]"></a>ErrDealTask</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, uart0001.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = ErrDealTask &rArr; StoreHostErrFlg &rArr; JudgeHostError &rArr; JudgeEr2450Err &rArr; GetBotVolt &rArr; ReadAdc &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreHostErrFlg
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreDipErrFlg
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f7]"></a>InitEvtDealSys</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uart0002.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitEvtDealSys
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneTask
</UL>

<P><STRONG><a name="[1f8]"></a>StoreCurEvtFlg</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, uart0002.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFIFO
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnlyReadFIFO
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNoReadSizeFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvtDealSys
</UL>

<P><STRONG><a name="[1f9]"></a>GetStoreEvtTypCod</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, uart0002.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFIFO
</UL>

<P><STRONG><a name="[1fa]"></a>JudgeHostEvt</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, uart0002.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeStartEvt
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeOilEvt
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvtDealSys
</UL>

<P><STRONG><a name="[1fd]"></a>EvtDealSys</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, uart0002.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeCardEvt
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHostEvt
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreCurEvtFlg
</UL>

<P><STRONG><a name="[1ff]"></a>WriteEN_485_0</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WriteEN_485_0 &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOrClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Init
</UL>

<P><STRONG><a name="[14]"></a>UART0_IRQHandler</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, uart0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = UART0_IRQHandler &rArr; WriteFIFO &rArr; GetNoWriteSizeFIFO &rArr; GetNoReadSizeFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFIFO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[200]"></a>HoldCOM0ConnSta</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, uart0.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCOM0EndFlg
</UL>

<P><STRONG><a name="[201]"></a>GetCOM0EndFlg</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart0.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HoldCOM0ConnSta
</UL>

<P><STRONG><a name="[3f1]"></a>ClearCOM0EndFlg</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart0.o(.text), UNUSED)

<P><STRONG><a name="[202]"></a>UART0Init</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, uart0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = UART0Init &rArr; UART_Init &rArr; uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FIFOConfig
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEN_485_0
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFIFO
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinselConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneTask
</UL>

<P><STRONG><a name="[203]"></a>ReadCOM0</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, uart0.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFIFO
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNoReadSizeFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCOM0Data
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReadCOM0DataCod
</UL>

<P><STRONG><a name="[204]"></a>ReadCOM0NoClear</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, uart0.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnlyReadFIFO
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNoReadSizeFIFO
</UL>

<P><STRONG><a name="[205]"></a>GetUart0Status</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart0.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetLineStatus
</UL>

<P><STRONG><a name="[121]"></a>SendCOM0</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, uart0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SendCOM0 &rArr; UART_Send &rArr; UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrinfSysInfo
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SentDatToDip2
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SentDatToDip1
</UL>

<P><STRONG><a name="[206]"></a>SendCOM0s</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uart0.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
</UL>

<P><STRONG><a name="[3f2]"></a>GetCOM0FramRecEndFlg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart0.o(.text), UNUSED)

<P><STRONG><a name="[3f3]"></a>ClearCOM0FramRecEndFlg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart0.o(.text), UNUSED)

<P><STRONG><a name="[207]"></a>InitAdc</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = InitAdc &rArr; GPIO_PinselConfig &rArr; PINSEL_ConfigPin &rArr; set_ResistorMode
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelCmd
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IntConfig
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinselConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneTask
</UL>

<P><STRONG><a name="[208]"></a>ReadAdc</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = ReadAdc &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelGetStatus
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelGetData
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCmd
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBotVolt
</UL>

<P><STRONG><a name="[209]"></a>GetBotVolt</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = GetBotVolt &rArr; ReadAdc &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAdc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeEr2450Err
</UL>

<P><STRONG><a name="[1e8]"></a>JudgeEr2450Err</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = JudgeEr2450Err &rArr; GetBotVolt &rArr; ReadAdc &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBotVolt
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHostError
</UL>

<P><STRONG><a name="[20a]"></a>Time0Init</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = Time0Init &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetPCLK
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigMatch
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ResetCounter
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneTask
</UL>

<P><STRONG><a name="[20d]"></a>Time1Init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Time1Init &rArr; TIM_Init &rArr; converUSecToVal &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigCapture
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ResetCounter
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinselConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneTask
</UL>

<P><STRONG><a name="[20e]"></a>Time2Init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Time2Init &rArr; TIM_Init &rArr; converUSecToVal &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigCapture
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ResetCounter
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinselConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneTask
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSoftCOM
</UL>

<P><STRONG><a name="[20f]"></a>Time3Init</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = Time3Init &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetPCLK
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigMatch
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ResetCounter
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSoftCOM
</UL>

<P><STRONG><a name="[210]"></a>WritesSoftTxd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, softuart-t3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WritesSoftTxd &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOrClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
</UL>

<P><STRONG><a name="[211]"></a>WritesSoftTxc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, softuart-t3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WritesSoftTxc &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOrClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
</UL>

<P><STRONG><a name="[212]"></a>ReadSoftRxdcp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, softuart-t3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ReadSoftRxdcp &rArr; GPIO_ReadIoVal &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadIoVal
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
</UL>

<P><STRONG><a name="[3f4]"></a>Cleare3HdlcFramEndFlg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, softuart-t3.o(.text), UNUSED)

<P><STRONG><a name="[3f5]"></a>Gete3HdlcFramEndFlg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, softuart-t3.o(.text), UNUSED)

<P><STRONG><a name="[213]"></a>InitGpiosoftRxd</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, softuart-t3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IntCmd
</UL>

<P><STRONG><a name="[13]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 300 bytes, Stack size 8 bytes, softuart-t3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = TIMER3_IRQHandler &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearIntPending
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritesSoftTxc
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritesSoftTxd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[3f6]"></a>Cleartime0times</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, softuart-t3.o(.text), UNUSED)

<P><STRONG><a name="[27e]"></a>Cleart0HdlcFramEndFlg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, softuart-t3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearHdlcFrameEndFlg
</UL>

<P><STRONG><a name="[27d]"></a>Gett0HdlcFramEndFlg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, softuart-t3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHdlcFrameEndFlg
</UL>

<P><STRONG><a name="[12]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, softuart-t3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = TIMER2_IRQHandler &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearIntPending
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSoftRxdcp
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFIFO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[279]"></a>SendSoftCOM</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, softuart-t3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HdlcSendDeal
</UL>

<P><STRONG><a name="[214]"></a>ReadSoftCOM</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, softuart-t3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ReadSoftCOM &rArr; ReadFIFO &rArr; GetNoReadSizeFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFIFO
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNoReadSizeFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHdlcFrame
</UL>

<P><STRONG><a name="[215]"></a>InitSoftCOM</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, softuart-t3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = InitSoftCOM &rArr; Time3Init &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time3Init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time2Init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFIFO
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOrClearValue
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinselConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneTask
</UL>

<P><STRONG><a name="[216]"></a>TestSoftCOM</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, softuart-t3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216 + Unknown Stack Size
<LI>Call Chain = TestSoftCOM &rArr; HdlcDeal &rArr; CSNR_RecDealHostDip &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitWatchDog
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLedFlg
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManageLedFlg
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HdlcDeal
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneTask
</UL>

<P><STRONG><a name="[21d]"></a>GetCrc16Check</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, crccheck.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetCrc16Check
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunPara
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataSend_CSNR
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSNR_GetData
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreSetModelVal
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDip1Data
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDip2Data
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SentDatToDip2
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SentDatToDip1
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreData
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHxn5OilBoxModel
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stcModelComplexToMulstcModel
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stcModelComplexTostcModel
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stcModelSempleTostcModelComplex
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stcModelTostcModelComplex
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDf4dOilBoxModel
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSelectModel
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreSelectModel
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAddDipVal
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreAddDipVal
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreReviseHight
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreDensity
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOilBoxModelsModelSemple
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOilBoxModelsModel
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadOilBoxModel
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLstRedFlshRecNum_gprs
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLstRedFlshRecNum
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLstRedFlshRecNum_gprs
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLstRedFlshRecNum
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreCurFlshRecNum
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadReviseHight
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHostInfo
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFixInfo
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDensity
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurFlshRecNum
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDistFram
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoresDistFram
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFix
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHight
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDen
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCardDensityVal
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCardPara
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCardPara
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HightCard
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixCard
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DensityCard
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCardFlg
</UL>

<P><STRONG><a name="[3f7]"></a>GetModBusCrc16</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, crccheck.o(.text), UNUSED)

<P><STRONG><a name="[3f8]"></a>GetModBusCrc16Up</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, crccheck.o(.text), UNUSED)

<P><STRONG><a name="[274]"></a>GetCRCR16_8408_FFFF_FFFF_Table</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, crccheck.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetCRCR16_8408_FFFF_FFFF_Table
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HdlcSendDeal
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HdlcRecDeal
</UL>

<P><STRONG><a name="[1b9]"></a>InitFIFO</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fifo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSoftCOM
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEvtDealSys
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitErrDealSys
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3Init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCOM1Bout
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
</UL>

<P><STRONG><a name="[3f9]"></a>ClearFIFO</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fifo.o(.text), UNUSED)

<P><STRONG><a name="[1be]"></a>GetNoReadSizeFIFO</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetNoReadSizeFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNoWriteSizeFIFO
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSoftCOM
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCOM0NoClear
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCOM0
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreCurEvtFlg
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrLedIndicate
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrDisplayIndicate
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreCurErrFlg
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetErrorCode
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCOM3NoClear
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCOM3
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCOM2NoClear
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCOM2
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFIFO
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnlyReadFIFO
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCOM1NoClear
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCOM1
</UL>

<P><STRONG><a name="[21a]"></a>GetNoWriteSizeFIFO</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetNoWriteSizeFIFO &rArr; GetNoReadSizeFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNoReadSizeFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFIFO
</UL>

<P><STRONG><a name="[1b2]"></a>WriteFIFO</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WriteFIFO &rArr; GetNoWriteSizeFIFO &rArr; GetNoReadSizeFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNoWriteSizeFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreCurEvtFlg
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreCurErrFlg
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreErrFlg
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[1bf]"></a>ReadFIFO</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ReadFIFO &rArr; GetNoReadSizeFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNoReadSizeFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSoftCOM
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCOM0
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStoreEvtTypCod
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStoreErrTypCod
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreCurErrFlg
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetErrorCode
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCOM3
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCOM2
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCOM1
</UL>

<P><STRONG><a name="[1c1]"></a>OnlyReadFIFO</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, fifo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNoReadSizeFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCOM0NoClear
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreCurEvtFlg
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrLedIndicate
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrDisplayIndicate
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreCurErrFlg
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCOM3NoClear
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCOM2NoClear
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCOM1NoClear
</UL>

<P><STRONG><a name="[21b]"></a>SentDatToDip1</STRONG> (Thumb, 128 bytes, Stack size 96 bytes, getdipprs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCOM0
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReadCOM0DataCod
</UL>

<P><STRONG><a name="[21e]"></a>SentDatToDip2</STRONG> (Thumb, 128 bytes, Stack size 96 bytes, getdipprs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCOM0
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReadCOM0DataCod
</UL>

<P><STRONG><a name="[21f]"></a>GetDip2Data</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, getdipprs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCOM0Data
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReadCOM0DataCod
</UL>

<P><STRONG><a name="[220]"></a>GetDip1Data</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, getdipprs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCOM0Data
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReadCOM0DataCod
</UL>

<P><STRONG><a name="[221]"></a>SendReadCOM0DataCod</STRONG> (Thumb, 392 bytes, Stack size 64 bytes, getdipprs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDip1Data
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDip2Data
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SentDatToDip2
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SentDatToDip1
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCOM0
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM0Task
</UL>

<P><STRONG><a name="[22e]"></a>GetDip1ComErrFlg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, getdipprs.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeDip1Error
</UL>

<P><STRONG><a name="[22f]"></a>GetDip2ComErrFlg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, getdipprs.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeDip2Error
</UL>

<P><STRONG><a name="[103]"></a>GetMyDip1Tmp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, getdipprs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfComSysInfo
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreData
</UL>

<P><STRONG><a name="[102]"></a>GetMyDip2Tmp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, getdipprs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfComSysInfo
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreData
</UL>

<P><STRONG><a name="[2df]"></a>GetMyDip1Err</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, getdipprs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDipPrsAvg
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreData
</UL>

<P><STRONG><a name="[2e0]"></a>GetMyDip2Err</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, getdipprs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDipPrsAvg
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreData
</UL>

<P><STRONG><a name="[105]"></a>GetMyDip1Den</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, getdipprs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfComSysInfo
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreData
</UL>

<P><STRONG><a name="[104]"></a>GetMyDip2Den</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, getdipprs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfComSysInfo
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreData
</UL>

<P><STRONG><a name="[22a]"></a>GetDip2DataErrFlg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, getdipprs.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeDipPrsDif
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeDip2Error
</UL>

<P><STRONG><a name="[22b]"></a>GetDip1DataErrFlg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, getdipprs.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeDipPrsDif
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeDip1Error
</UL>

<P><STRONG><a name="[223]"></a>GetCOM0Data</STRONG> (Thumb, 106 bytes, Stack size 72 bytes, getdipprs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDip1Data
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDip2Data
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCOM0
</UL>

<P><STRONG><a name="[229]"></a>GetDipComErrFlg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, getdipprs.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeDipPrsDif
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeDip2Error
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeDip1Error
</UL>

<P><STRONG><a name="[225]"></a>GetDip1Prs</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, getdipprs.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncDisplay
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeDipPrsDif
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeDip1Prs
</UL>

<P><STRONG><a name="[107]"></a>GetDip1Hig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, getdipprs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfComSysInfo
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOnceInfo
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMathPara
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreData
</UL>

<P><STRONG><a name="[227]"></a>GetDip2Prs</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, getdipprs.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncDisplay
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeDipPrsDif
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeDip2Prs
</UL>

<P><STRONG><a name="[106]"></a>GetDip2Hig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, getdipprs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfComSysInfo
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOnceInfo
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMathPara
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreData
</UL>

<P><STRONG><a name="[3fa]"></a>GetDipTmp</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, getdipprs.o(.text), UNUSED)

<P><STRONG><a name="[224]"></a>JudgeDip1Prs</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, getdipprs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDip1Prs
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeDipPrsDif
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeDip1Error
</UL>

<P><STRONG><a name="[226]"></a>JudgeDip2Prs</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, getdipprs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDip2Prs
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeDipPrsDif
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeDip2Error
</UL>

<P><STRONG><a name="[228]"></a>JudgeDipPrsDif</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, getdipprs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeDip2Prs
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeDip1Prs
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDip2Prs
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDip1Prs
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDipComErrFlg
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDip1DataErrFlg
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDip2DataErrFlg
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeDip1Error
</UL>

<P><STRONG><a name="[1ec]"></a>JudgeDip1Error</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, getdipprs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeDipPrsDif
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeDip1Prs
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDipComErrFlg
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDip1DataErrFlg
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDip1ComErrFlg
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrDealSys
</UL>

<P><STRONG><a name="[1ed]"></a>JudgeDip2Error</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, getdipprs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeDip2Prs
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDipComErrFlg
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDip2DataErrFlg
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDip2ComErrFlg
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrDealSys
</UL>

<P><STRONG><a name="[230]"></a>COM0Task</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, getdipprs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReadCOM0DataCod
</UL>

<P><STRONG><a name="[240]"></a>GetDipVal</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dipcomoperate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostScanDip
</UL>

<P><STRONG><a name="[231]"></a>GetAddSpeed</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, dipcomoperate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = GetAddSpeed &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMyAddSpeed2
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMyAddSpeed1
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostScanDip
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreData
</UL>

<P><STRONG><a name="[234]"></a>GetSpeed</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, dipcomoperate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMySpeed2
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMySpeed1
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostScanDip
</UL>

<P><STRONG><a name="[235]"></a>GetFramRecEndFlgDip</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dipcomoperate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = GetFramRecEndFlgDip &rArr; GetCOM1EndFlg &rArr; HoldCOM1ConnSta &rArr; GetSysTime &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCOM1EndFlg
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSNR_RecDealDip
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSNR_RecDealHostDip
</UL>

<P><STRONG><a name="[236]"></a>ClearFramRecEndFlgDip</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dipcomoperate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ClearFramRecEndFlgDip &rArr; ClearCOM1EndFlg
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearCOM1EndFlg
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSNR_RecDealDip
</UL>

<P><STRONG><a name="[237]"></a>ReadRs485DataDip</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dipcomoperate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ReadRs485DataDip &rArr; ReadCOM1 &rArr; ReadFIFO &rArr; GetNoReadSizeFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCOM1
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSNR_RecDealDip
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSNR_RecDealHostDip
</UL>

<P><STRONG><a name="[239]"></a>GetRecaddrDip</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dipcomoperate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DipModelSet
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DipComOperate
</UL>

<P><STRONG><a name="[1f0]"></a>GetCom1Dip1ErrFlg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dipcomoperate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeDipError
</UL>

<P><STRONG><a name="[1f1]"></a>GetCom1Dip2ErrFlg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dipcomoperate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeDipError
</UL>

<P><STRONG><a name="[23f]"></a>GetRecFlgdip</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dipcomoperate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostScanDip
</UL>

<P><STRONG><a name="[238]"></a>DipComOperate</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, dipcomoperate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = DipComOperate &rArr; GetSysTime &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecaddrDip
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSNR_RecDealDip
</UL>

<P><STRONG><a name="[23a]"></a>StoreSetModelVal</STRONG> (Thumb, 1148 bytes, Stack size 240 bytes, dipcomoperate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = StoreSetModelVal &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFM24CL64
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DipModelSet
</UL>

<P><STRONG><a name="[2f5]"></a>GetSetModelFlg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dipcomoperate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcDip
</UL>

<P><STRONG><a name="[23c]"></a>DipModelSet</STRONG> (Thumb, 1550 bytes, Stack size 48 bytes, dipcomoperate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = DipModelSet &rArr; GetMathModelPara &rArr; GetOilBoxModel &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMathModelPara
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreSetModelVal
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecaddrDip
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySet
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSNR_RecDealDip
</UL>

<P><STRONG><a name="[23e]"></a>HostScanDip</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, dipcomoperate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = HostScanDip &rArr; DataSend_CSNR &rArr; SendCOM1 &rArr; UART_Send &rArr; UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMyLocoWorkState
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataSend_CSNR
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecFlgdip
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSpeed
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAddSpeed
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDipVal
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diptask
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HdlcDeal
</UL>

<P><STRONG><a name="[242]"></a>CSNR_RecDealDip</STRONG> (Thumb, 240 bytes, Stack size 144 bytes, dipcomoperate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = CSNR_RecDealDip &rArr; DipModelSet &rArr; GetMathModelPara &rArr; GetOilBoxModel &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSNR_GetData
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DipModelSet
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DipComOperate
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRs485DataDip
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearFramRecEndFlgDip
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFramRecEndFlgDip
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diptask
</UL>

<P><STRONG><a name="[25d]"></a>GetLed0Com1Flg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dipcomoperate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedTast
</UL>

<P><STRONG><a name="[f8]"></a>Diptask</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dipcomoperate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 936 + Unknown Stack Size
<LI>Call Chain = Diptask &rArr; CSNR_RecDealDip &rArr; DipModelSet &rArr; GetMathModelPara &rArr; GetOilBoxModel &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSNR_RecDealDip
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostScanDip
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CirculatesTask
</UL>

<P><STRONG><a name="[3fb]"></a>IO0PIN_R</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tmp.o(.text), UNUSED)

<P><STRONG><a name="[3fc]"></a>IO0CLR_W</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tmp.o(.text), UNUSED)

<P><STRONG><a name="[3fd]"></a>IO0SET_W</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tmp.o(.text), UNUSED)

<P><STRONG><a name="[3fe]"></a>IO0DIR_IN</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tmp.o(.text), UNUSED)

<P><STRONG><a name="[3ff]"></a>IO0DIR_OUT</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tmp.o(.text), UNUSED)

<P><STRONG><a name="[400]"></a>IO1DIR_OUT</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tmp.o(.text), UNUSED)

<P><STRONG><a name="[244]"></a>NOP</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NOP &rArr; FeedDog
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedDog
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nop
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlugICCard
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SentByte_SPI1
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperationCard
</UL>

<P><STRONG><a name="[401]"></a>IO2DIR_OUT</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tmp.o(.text), UNUSED)

<P><STRONG><a name="[402]"></a>IO2PIN_W</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tmp.o(.text), UNUSED)

<P><STRONG><a name="[403]"></a>IO1PIN_W</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tmp.o(.text), UNUSED)

<P><STRONG><a name="[245]"></a>ReadFlsh</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ReadFlsh &rArr; MX25L1602_RD &rArr; Get_Byte &rArr; RecByte_SPIF &rArr; SendOrRecByte_SPIF &rArr; ReadMISOF &rArr; GPIO_ReadIoVal &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L1602_RD
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlshRec
</UL>

<P><STRONG><a name="[246]"></a>WriteFlsh</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = WriteFlsh &rArr; MX25L1602_WR &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX25L1602_WR
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTask
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreData
</UL>

<P><STRONG><a name="[404]"></a>IO0PIN_W</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tmp.o(.text), UNUSED)

<P><STRONG><a name="[405]"></a>GetHostEvtFlg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tmp.o(.text), UNUSED)

<P><STRONG><a name="[1fb]"></a>JudgeStartEvt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tmp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHostEvt
</UL>

<P><STRONG><a name="[247]"></a>PrinfSysInfo</STRONG> (Thumb, 282 bytes, Stack size 120 bytes, tmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = PrinfSysInfo &rArr; ReadFixInfo &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCOM0
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTime
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySet
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayX10ms
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadReviseHight
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHostInfo
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFixInfo
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDensity
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOilBoxCod
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneTaskTimes
</UL>

<P><STRONG><a name="[251]"></a>OneTask</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, tmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224 + Unknown Stack Size
<LI>Call Chain = OneTask &rArr; TestSoftCOM &rArr; HdlcDeal &rArr; CSNR_RecDealHostDip &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayString
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestSoftCOM
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSoftCOM
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time2Init
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time1Init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time0Init
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAdc
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEvtDealSys
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3Init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFlashIO
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLed
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFramIO
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDisplay
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDS3231
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCardIO
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneTaskTimes
</UL>

<P><STRONG><a name="[f4]"></a>HoldTask</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = HoldTask &rArr; HoldLed &rArr; OffLed &rArr; UnLightLed &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HoldLed
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[259]"></a>IncDisplay</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, tmp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDip2Prs
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDip1Prs
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySet
</UL>

<P><STRONG><a name="[109]"></a>OneTaskTimes</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, tmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232 + Unknown Stack Size
<LI>Call Chain = OneTaskTimes &rArr; OneTask &rArr; TestSoftCOM &rArr; HdlcDeal &rArr; CSNR_RecDealHostDip &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurFlshRecNum
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneTask
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrinfSysInfo
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitErrDealSys
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLstFlshRecNum_gprs
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLstFlshRecNum
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f7]"></a>LedTast</STRONG> (Thumb, 694 bytes, Stack size 24 bytes, tmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = LedTast &rArr; OnLed &rArr; LightLed &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMySpeed2
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMySpeed1
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMyLocoWorkState
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMyEngRotSpd
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLed1Com2Flg
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLed0Com1Flg
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnLed
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OffLed
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLed2Com3Flg
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CirculatesTask
</UL>

<P><STRONG><a name="[260]"></a>DisplayOnceInfo</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, tmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = DisplayOnceInfo &rArr; DisplaySet &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMySpeed2
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMySpeed1
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMyLocoWorkState
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMyEngRotSpd
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDip2Hig
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDip1Hig
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySet
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDipVal
</UL>

<P><STRONG><a name="[f6]"></a>DisplayDipVal</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, tmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = DisplayDipVal &rArr; DisplayOnceInfo &rArr; DisplaySet &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOnceInfo
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnLed
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySet
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHostErrFlg
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDipErrFlg
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayX10ms
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CirculatesTask
</UL>

<P><STRONG><a name="[262]"></a>TestTask</STRONG> (Thumb, 72 bytes, Stack size 136 bytes, tmp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlsh
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreCurFlshRecNum
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurFlshRecNum
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecNumAddr
</UL>

<P><STRONG><a name="[267]"></a>GetCheckSum</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tax2.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecTAX2Bef
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecTAX2Bak
</UL>

<P><STRONG><a name="[271]"></a>GetCheckSumNR</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tax2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetCheckSumNR
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataSend_CSNR
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSNR_GetData
</UL>

<P><STRONG><a name="[266]"></a>RecTAX2Bak</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, tax2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCheckSum
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecTAX2Info
</UL>

<P><STRONG><a name="[268]"></a>RecTAX2Bef</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, tax2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCheckSum
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecTAX2Info
</UL>

<P><STRONG><a name="[26b]"></a>GetTax2BefPackErrFlg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tax2.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTAX2Info
</UL>

<P><STRONG><a name="[26c]"></a>GetTax2BakPackErrFlg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tax2.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTAX2Info
</UL>

<P><STRONG><a name="[269]"></a>RecTAX2Info</STRONG> (Thumb, 112 bytes, Stack size 136 bytes, tax2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCOM2
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecTAX2Bef
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecTAX2Bak
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tax2Task
</UL>

<P><STRONG><a name="[26a]"></a>GetTAX2Info</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tax2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTax2BakPackErrFlg
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTax2BefPackErrFlg
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeTAX2Error
</UL>

<P><STRONG><a name="[26d]"></a>GetTax2ComErrFlg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tax2.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeTAX2Error
</UL>

<P><STRONG><a name="[26e]"></a>GetTaxBefErrFlg</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, tax2.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeTAX2Error
</UL>

<P><STRONG><a name="[26f]"></a>GetTaxBakErrFlg</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, tax2.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeTAX2Error
</UL>

<P><STRONG><a name="[406]"></a>JudgeTAX2Data</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tax2.o(.text), UNUSED)

<P><STRONG><a name="[407]"></a>JudgeTAX2Evt</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tax2.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>JudgeTAX2Error</STRONG> (Thumb, 78 bytes, Stack size 80 bytes, tax2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTaxBakErrFlg
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTaxBefErrFlg
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTax2ComErrFlg
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTAX2Info
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrDealSys
</UL>

<P><STRONG><a name="[408]"></a>GetTAX2SpeedInfo</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tax2.o(.text), UNUSED)

<P><STRONG><a name="[409]"></a>GetNoSpeedFlg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tax2.o(.text), UNUSED)

<P><STRONG><a name="[270]"></a>Tax2Task</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tax2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecTAX2Info
</UL>

<P><STRONG><a name="[280]"></a>GetRecAddr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, csnr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSNR_RecDealHostDip
</UL>

<P><STRONG><a name="[243]"></a>CSNR_GetData</STRONG> (Thumb, 278 bytes, Stack size 72 bytes, csnr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CSNR_GetData &rArr; GetCrc16Check
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCheckSumNR
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSNR_RecDealDip
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSNR_RecDealHostDip
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSNR_RecDeal
</UL>

<P><STRONG><a name="[241]"></a>DataSend_CSNR</STRONG> (Thumb, 282 bytes, Stack size 552 bytes, csnr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = DataSend_CSNR &rArr; SendCOM1 &rArr; UART_Send &rArr; UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCOM1
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCheckSumNR
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostScanDip
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostScan
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostStationSend_CSNR
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSendData
</UL>

<P><STRONG><a name="[277]"></a>GetUframAnswer</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, hdlc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HdlcSendDeal
</UL>

<P><STRONG><a name="[272]"></a>HdlcRecDeal</STRONG> (Thumb, 252 bytes, Stack size 312 bytes, hdlc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 404 + Unknown Stack Size
<LI>Call Chain = HdlcRecDeal &rArr; ReadHdlcFrame &rArr; ReadSoftCOM &rArr; ReadFIFO &rArr; GetNoReadSizeFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRCR16_8408_FFFF_FFFF_Table
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLedFlg
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHdlcFrame
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HdlcDeal
</UL>

<P><STRONG><a name="[275]"></a>HdlcSendDeal</STRONG> (Thumb, 306 bytes, Stack size 296 bytes, hdlc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = HdlcSendDeal &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCRCR16_8408_FFFF_FFFF_Table
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLedFlg
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSoftCOM
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSetHdlcDataBuf
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSendHdlcAddr
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUframAnswer
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HdlcDeal
</UL>

<P><STRONG><a name="[217]"></a>HdlcDeal</STRONG> (Thumb, 76 bytes, Stack size 264 bytes, hdlc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216 + Unknown Stack Size
<LI>Call Chain = HdlcDeal &rArr; CSNR_RecDealHostDip &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostScanDip
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCOM1Bout
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHdlcFrameEndFlg
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearHdlcFrameEndFlg
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSNR_RecDealHostDip
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HdlcSendDeal
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HdlcRecDeal
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestSoftCOM
</UL>

<P><STRONG><a name="[27a]"></a>GetHdlcFrameEndFlg</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, com-csnr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetHdlcFrameEndFlg
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gett0HdlcFramEndFlg
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HdlcDeal
</UL>

<P><STRONG><a name="[27b]"></a>ClearHdlcFrameEndFlg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, com-csnr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ClearHdlcFrameEndFlg
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cleart0HdlcFramEndFlg
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HdlcDeal
</UL>

<P><STRONG><a name="[273]"></a>ReadHdlcFrame</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, com-csnr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ReadHdlcFrame &rArr; ReadSoftCOM &rArr; ReadFIFO &rArr; GetNoReadSizeFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSoftCOM
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HdlcRecDeal
</UL>

<P><STRONG><a name="[276]"></a>GetSendHdlcAddr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, com-csnr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HdlcSendDeal
</UL>

<P><STRONG><a name="[278]"></a>GetSetHdlcDataBuf</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, com-csnr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetSetHdlcDataBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HdlcSendDeal
</UL>

<P><STRONG><a name="[27c]"></a>CSNR_RecDealHostDip</STRONG> (Thumb, 212 bytes, Stack size 544 bytes, com-csnr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = CSNR_RecDealHostDip &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSNR_GetData
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRs485DataDip
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFramRecEndFlgDip
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLedFlg
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DipConvertHig
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearFramRecEndFlg
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecAddr
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HdlcDeal
</UL>

<P><STRONG><a name="[281]"></a>DipConvertHig</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, dip_hig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DipConvertHig
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSNR_RecDealHostDip
</UL>

<P><STRONG><a name="[263]"></a>StoreCurFlshRecNum</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, framstore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = StoreCurFlshRecNum &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFM24CL64
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTask
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreData
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarddataOperate
</UL>

<P><STRONG><a name="[264]"></a>ReadCurFlshRecNum</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, framstore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = ReadCurFlshRecNum &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFM24CL64
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurFlshRecNum
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTask
</UL>

<P><STRONG><a name="[283]"></a>StoreLstRedFlshRecNum</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, framstore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = StoreLstRedFlshRecNum &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFM24CL64
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCard
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarddataOperate
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSendData
</UL>

<P><STRONG><a name="[284]"></a>StoreLstRedFlshRecNum_gprs</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, framstore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = StoreLstRedFlshRecNum_gprs &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFM24CL64
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarddataOperate
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSendData
</UL>

<P><STRONG><a name="[342]"></a>GetReadDataFlg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, framstore.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeCardEvt
</UL>

<P><STRONG><a name="[343]"></a>SetReadDataFlgTrue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, framstore.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeCardEvt
</UL>

<P><STRONG><a name="[285]"></a>ReadLstRedFlshRecNum</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, framstore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = ReadLstRedFlshRecNum &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFM24CL64
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCard
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLstFlshRecNum
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSendData
</UL>

<P><STRONG><a name="[286]"></a>ReadLstRedFlshRecNum_gprs</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, framstore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = ReadLstRedFlshRecNum_gprs &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFM24CL64
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLstFlshRecNum_gprs
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSendData
</UL>

<P><STRONG><a name="[25b]"></a>GetLstFlshRecNum</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, framstore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = GetLstFlshRecNum &rArr; ReadLstRedFlshRecNum &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLstRedFlshRecNum
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneTaskTimes
</UL>

<P><STRONG><a name="[25c]"></a>GetLstFlshRecNum_gprs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, framstore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = GetLstFlshRecNum_gprs &rArr; ReadLstRedFlshRecNum_gprs &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLstRedFlshRecNum_gprs
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneTaskTimes
</UL>

<P><STRONG><a name="[287]"></a>StoreSysRunPara</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, framstore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = StoreSysRunPara &rArr; WriteFM24CL64 &rArr; WriteByteWithI2C &rArr; WriteSDA &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFM24CL64
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarddataOperate
</UL>

<P><STRONG><a name="[fa]"></a>GetSysRunPara</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, framstore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = GetSysRunPara &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFM24CL64
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPrintfFlg
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNoAvgFlg
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDebugModelDisHig
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStoreTime
</UL>

<P><STRONG><a name="[288]"></a>StoreOilBoxModel</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, framstore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = StoreOilBoxModel &rArr; WriteFM24CL64 &rArr; WriteByteWithI2C &rArr; WriteSDA &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFM24CL64
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetModel
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModCard
</UL>

<P><STRONG><a name="[289]"></a>ReadOilBoxModel</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, framstore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFM24CL64
</UL>

<P><STRONG><a name="[28a]"></a>GetOilBoxModelsModel</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, framstore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GetOilBoxModelsModel &rArr; GetOilBoxCod &rArr; ReadSelectModel &rArr; ReadFM24CL64 &rArr; WriteByteWithI2C &rArr; WriteSDA &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFM24CL64
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOilBoxCod
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOilBoxModel
</UL>

<P><STRONG><a name="[28b]"></a>GetOilBoxModelsModelSemple</STRONG> (Thumb, 446 bytes, Stack size 32 bytes, framstore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GetOilBoxModelsModelSemple &rArr; GetOilBoxCod &rArr; ReadSelectModel &rArr; ReadFM24CL64 &rArr; WriteByteWithI2C &rArr; WriteSDA &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFM24CL64
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOilBoxCod
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOilBoxModel
</UL>

<P><STRONG><a name="[28c]"></a>StoreDensity</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, framstore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = StoreDensity &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFM24CL64
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDen
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCardDensityVal
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DensityCard
</UL>

<P><STRONG><a name="[24c]"></a>ReadDensity</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, framstore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = ReadDensity &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFM24CL64
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrinfSysInfo
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMathModelPara
</UL>

<P><STRONG><a name="[28d]"></a>StoreReviseHight</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, framstore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = StoreReviseHight &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFM24CL64
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHight
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HightCard
</UL>

<P><STRONG><a name="[24b]"></a>ReadReviseHight</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, framstore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = ReadReviseHight &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFM24CL64
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrinfSysInfo
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMathModelPara
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHight
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HightCard
</UL>

<P><STRONG><a name="[28f]"></a>StoreAddDipVal</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, framstore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFM24CL64
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
</UL>

<P><STRONG><a name="[290]"></a>ReadAddDipVal</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, framstore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = ReadAddDipVal &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFM24CL64
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMathModelPara
</UL>

<P><STRONG><a name="[291]"></a>StoreSelectModel</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, framstore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = StoreSelectModel &rArr; WriteFM24CL64 &rArr; WriteByteWithI2C &rArr; WriteSDA &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFM24CL64
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSel
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelSelectCard
</UL>

<P><STRONG><a name="[292]"></a>ReadSelectModel</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, framstore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ReadSelectModel &rArr; ReadFM24CL64 &rArr; WriteByteWithI2C &rArr; WriteSDA &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFM24CL64
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOilBoxCod
</UL>

<P><STRONG><a name="[293]"></a>StoreHostInfo</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, framstore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFM24CL64
</UL>

<P><STRONG><a name="[249]"></a>ReadHostInfo</STRONG> (Thumb, 416 bytes, Stack size 56 bytes, framstore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ReadHostInfo &rArr; ReadFM24CL64 &rArr; WriteByteWithI2C &rArr; WriteSDA &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFM24CL64
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrinfSysInfo
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCard
</UL>

<P><STRONG><a name="[294]"></a>StoreFixInfo</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, framstore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = StoreFixInfo &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFM24CL64
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFix
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixCard
</UL>

<P><STRONG><a name="[250]"></a>ReadFixInfo</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, framstore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = ReadFixInfo &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFM24CL64
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrinfSysInfo
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCard
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreData
</UL>

<P><STRONG><a name="[40a]"></a>JudgeFramEvt</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, framstore.o(.text), UNUSED)

<P><STRONG><a name="[295]"></a>TestFramOneWord</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, framstore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TestFramOneWord &rArr; WriteFM24CL64 &rArr; WriteByteWithI2C &rArr; WriteSDA &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFM24CL64
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFM24CL64
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeFramWordEvt
</UL>

<P><STRONG><a name="[296]"></a>GetFramWordTestErrFlg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, framstore.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeFramWordEvt
</UL>

<P><STRONG><a name="[1e9]"></a>JudgeFramWordEvt</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, framstore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = JudgeFramWordEvt &rArr; TestFramOneWord &rArr; WriteFM24CL64 &rArr; WriteByteWithI2C &rArr; WriteSDA &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFramWordTestErrFlg
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFramOneWord
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHostError
</UL>

<P><STRONG><a name="[25a]"></a>GetCurFlshRecNum</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, framstore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = GetCurFlshRecNum &rArr; ReadCurFlshRecNum &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurFlshRecNum
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneTaskTimes
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreData
</UL>

<P><STRONG><a name="[297]"></a>InitIOForSPI1</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = InitIOForSPI1 &rArr; GPIO_PinselConfig &rArr; PINSEL_ConfigPin &rArr; set_ResistorMode
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinselConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDisplay
</UL>

<P><STRONG><a name="[298]"></a>WriteSCK1</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WriteSCK1 &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nop
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOrClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SentByte_SPI1
</UL>

<P><STRONG><a name="[299]"></a>ReadSCK1</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, display.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nop
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadIoVal
</UL>

<P><STRONG><a name="[29a]"></a>WriteMOSI1</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WriteMOSI1 &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nop
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOrClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SentByte_SPI1
</UL>

<P><STRONG><a name="[29b]"></a>ReadMOSI1</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, display.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nop
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadIoVal
</UL>

<P><STRONG><a name="[29c]"></a>WriteMISO1</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, display.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nop
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOrClearValue
</UL>

<P><STRONG><a name="[29d]"></a>ReadMISO1</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, display.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nop
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadIoVal
</UL>

<P><STRONG><a name="[29e]"></a>WriteSoftSpiCS1</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WriteSoftSpiCS1 &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nop
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOrClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCS_DIS
</UL>

<P><STRONG><a name="[29f]"></a>WriteCS_DIS</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WriteCS_DIS &rArr; WriteSoftSpiCS1 &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoftSpiCS1
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SentByteTo7219
</UL>

<P><STRONG><a name="[2a0]"></a>SentByte_SPI1</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SentByte_SPI1 &rArr; WriteMOSI1 &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOP
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMOSI1
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSCK1
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SentByteTo7219
</UL>

<P><STRONG><a name="[2a1]"></a>SentByteTo7219</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SentByteTo7219 &rArr; SentByte_SPI1 &rArr; WriteMOSI1 &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SentByte_SPI1
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCS_DIS
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayString
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MovDisplayChar
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayNumWithDot
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayNum
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDisplay
</UL>

<P><STRONG><a name="[2a3]"></a>InitDisplayBuf</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, display.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDisplay
</UL>

<P><STRONG><a name="[2a2]"></a>ClaerDisplaySet</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, display.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperationCard
</UL>

<P><STRONG><a name="[112]"></a>ClaerDisplaySetWithoutStore</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, display.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicateWriteNoFinsh
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicateCardFull
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicateRecordFinsh
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicateWriteCardFinsh
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarddataOperate
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicateCardNoDef
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicateCardNoSet
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicateCardTypErr
</UL>

<P><STRONG><a name="[253]"></a>InitDisplay</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = InitDisplay &rArr; SentByteTo7219 &rArr; SentByte_SPI1 &rArr; WriteMOSI1 &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDisplayBuf
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SentByteTo7219
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitIOForSPI1
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDipVal
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneTask
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayNum
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResumeDisplaySet
</UL>

<P><STRONG><a name="[2a4]"></a>ResumeDisplaySet</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, display.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDisplay
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperationCard
</UL>

<P><STRONG><a name="[2a5]"></a>DisplayNum</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, display.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SentByteTo7219
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDisplay
</UL>

<P><STRONG><a name="[2a6]"></a>DisplayNumWithDot</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, display.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SentByteTo7219
</UL>

<P><STRONG><a name="[254]"></a>DisplayString</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = DisplayString &rArr; SentByteTo7219 &rArr; SentByte_SPI1 &rArr; WriteMOSI1 &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SentByteTo7219
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneTask
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayContrl
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displayf
</UL>

<P><STRONG><a name="[2a7]"></a>MovDisplayChar</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, display.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayX10ms
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SentByteTo7219
</UL>

<P><STRONG><a name="[2a8]"></a>Displayf</STRONG> (Thumb, 62 bytes, Stack size 288 bytes, display.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayString
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>

<P><STRONG><a name="[1e2]"></a>DisplaySet</STRONG> (Thumb, 160 bytes, Stack size 304 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = DisplaySet &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedDog
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDipVal
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTime
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOnceInfo
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncDisplay
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrinfSysInfo
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DipModelSet
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrDisplayIndicate
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCopyCardDisplay
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicateWriteNoFinsh
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicateCardFull
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicateRecordFinsh
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicateUSBFlgErr
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicateWriteCardFlgErr
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicateWriteCardFinsh
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCardDisplay
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDipMathVal
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarddataOperate
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFix
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSel
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHight
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDen
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCardDensityVal
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrcCheckErrIndicate
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreErrIndicate
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelSelectCard
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModCard
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HightCard
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixCard
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpandCard
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DensityCard
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DenDataCard
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperationCard
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicateCardNoDef
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicateCardNoSet
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicateCardTypErr
</UL>

<P><STRONG><a name="[2a9]"></a>DisplayContrl</STRONG> (Thumb, 274 bytes, Stack size 8 bytes, display.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayString
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HoldDisplay
</UL>

<P><STRONG><a name="[2aa]"></a>HoldDisplay</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, display.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayContrl
</UL>

<P><STRONG><a name="[2b4]"></a>BCD2HEX</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ds3231.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTime
</UL>

<P><STRONG><a name="[2b8]"></a>HEX2BCD</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, ds3231.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HEX2BCD
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTime
</UL>

<P><STRONG><a name="[2ab]"></a>ReadDS3231Byte</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ds3231.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ReadDS3231Byte &rArr; WriteByteWithI2C &rArr; WriteSDA &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByteWithI2C
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopI2C
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartI2C
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByteWithI2C
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasterNoAckI2C
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSlaveAckI2C
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTemp
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTime
</UL>

<P><STRONG><a name="[2b2]"></a>WriteDS3231Byte</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ds3231.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = WriteDS3231Byte &rArr; WriteByteWithI2C &rArr; WriteSDA &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByteWithI2C
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopI2C
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartI2C
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSlaveAckI2C
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTime
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDS3231
</UL>

<P><STRONG><a name="[2b3]"></a>ReadTime</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, ds3231.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ReadTime &rArr; ReadDS3231Byte &rArr; WriteByteWithI2C &rArr; WriteSDA &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDS3231Byte
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCD2HEX
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTime
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreData
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfTime
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpandCard
</UL>

<P><STRONG><a name="[2b5]"></a>ReadTemp</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ds3231.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDS3231Byte
</UL>

<P><STRONG><a name="[2b6]"></a>PrintfTime</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ds3231.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = PrintfTime &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTime
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTime
</UL>

<P><STRONG><a name="[248]"></a>DisplayTime</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ds3231.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = DisplayTime &rArr; DisplaySet &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySet
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayX10ms
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTime
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrinfSysInfo
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTime
</UL>

<P><STRONG><a name="[2b7]"></a>WriteTime</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, ds3231.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = WriteTime &rArr; DisplayTime &rArr; DisplaySet &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTime
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfTime
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDS3231Byte
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEX2BCD
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTime
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarddataOperate
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpandCard
</UL>

<P><STRONG><a name="[2b9]"></a>SetTime</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, ds3231.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTime
</UL>

<P><STRONG><a name="[257]"></a>InitDS3231</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ds3231.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = InitDS3231 &rArr; WriteDS3231Byte &rArr; WriteByteWithI2C &rArr; WriteSDA &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitI2CIO
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDS3231Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneTask
</UL>

<P><STRONG><a name="[2bb]"></a>UnLightLed</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UnLightLed &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOrClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OffLed
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HoldLed
</UL>

<P><STRONG><a name="[2bc]"></a>LightLed</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LightLed &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOrClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnLed
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HoldLed
</UL>

<P><STRONG><a name="[1e1]"></a>OnLed</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = OnLed &rArr; LightLed &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedDog
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightLed
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedTast
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDipVal
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManageLedFlg
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrLedIndicate
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrDisplayIndicate
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicateCardFull
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicateRecordFinsh
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicateUSBFlgErr
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicateWriteCardFlgErr
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnAllLed
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLed
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperationCard
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicateCardNoDef
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicateCardNoSet
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicateCardTypErr
</UL>

<P><STRONG><a name="[2bd]"></a>OnAllLed</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = OnAllLed &rArr; OnLed &rArr; LightLed &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnLed
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLed
</UL>

<P><STRONG><a name="[1e3]"></a>OffLed</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OffLed &rArr; UnLightLed &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLightLed
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedTast
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManageLedFlg
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrLedIndicate
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrDisplayIndicate
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OffAllLed
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HoldLed
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperationCard
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicatePullOutCard
</UL>

<P><STRONG><a name="[2be]"></a>OffAllLed</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OffAllLed &rArr; OffLed &rArr; UnLightLed &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OffLed
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLed
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperationCard
</UL>

<P><STRONG><a name="[258]"></a>HoldLed</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = HoldLed &rArr; OffLed &rArr; UnLightLed &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OffLed
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightLed
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLightLed
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HoldTask
</UL>

<P><STRONG><a name="[252]"></a>InitLed</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = InitLed &rArr; OnAllLed &rArr; OnLed &rArr; LightLed &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnLed
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayX10ms
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinselConfig
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OffAllLed
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnAllLed
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneTask
</UL>

<P><STRONG><a name="[1af]"></a>FeedDog</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, watchdog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FeedDog
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitWatchDog
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOP
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnLed
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySet
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayX10ms
</UL>

<P><STRONG><a name="[10a]"></a>InitWatchDog</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, watchdog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = InitWatchDog &rArr; WDT_Start &rArr; WDT_SetTimeOut &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Start
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedDog
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestSoftCOM
</UL>

<P><STRONG><a name="[40b]"></a>ResetSys</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, watchdog.o(.text), UNUSED)

<P><STRONG><a name="[2ba]"></a>InitI2CIO</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, iic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDS3231
</UL>

<P><STRONG><a name="[256]"></a>InitFramIO</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = InitFramIO &rArr; GPIO_PinselConfig &rArr; PINSEL_ConfigPin &rArr; set_ResistorMode
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinselConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneTask
</UL>

<P><STRONG><a name="[2bf]"></a>WriteSCL</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WriteSCL &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nop
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOrClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasterAckI2C
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByteWithI2C
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopI2C
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartI2C
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByteWithI2C
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasterNoAckI2C
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSlaveAckI2C
</UL>

<P><STRONG><a name="[2c0]"></a>ReadSCL</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, iic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nop
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadIoVal
</UL>

<P><STRONG><a name="[2c1]"></a>WriteSDA</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WriteSDA &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nop
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOrClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasterAckI2C
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByteWithI2C
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopI2C
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartI2C
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasterNoAckI2C
</UL>

<P><STRONG><a name="[2c2]"></a>ReadSDA</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ReadSDA &rArr; GPIO_ReadIoVal &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nop
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadIoVal
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByteWithI2C
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSlaveAckI2C
</UL>

<P><STRONG><a name="[2ac]"></a>StartI2C</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = StartI2C &rArr; WriteSDA &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSDA
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSCL
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFM24CL64
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDS3231Byte
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDS3231Byte
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFM24CL64
</UL>

<P><STRONG><a name="[2b1]"></a>StopI2C</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = StopI2C &rArr; WriteSDA &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSDA
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSCL
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFM24CL64
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDS3231Byte
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDS3231Byte
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFM24CL64
</UL>

<P><STRONG><a name="[2c3]"></a>MasterAckI2C</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MasterAckI2C &rArr; WriteSDA &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSDA
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSCL
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFM24CL64
</UL>

<P><STRONG><a name="[2b0]"></a>MasterNoAckI2C</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MasterNoAckI2C &rArr; WriteSDA &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSDA
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSCL
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDS3231Byte
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFM24CL64
</UL>

<P><STRONG><a name="[2ae]"></a>CheckSlaveAckI2C</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CheckSlaveAckI2C &rArr; ReadSDA &rArr; GPIO_ReadIoVal &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSDA
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSCL
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFM24CL64
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDS3231Byte
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDS3231Byte
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFM24CL64
</UL>

<P><STRONG><a name="[2ad]"></a>WriteByteWithI2C</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = WriteByteWithI2C &rArr; WriteSDA &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSDA
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSCL
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFM24CL64
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDS3231Byte
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDS3231Byte
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFM24CL64
</UL>

<P><STRONG><a name="[2af]"></a>ReadByteWithI2C</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ReadByteWithI2C &rArr; ReadSDA &rArr; GPIO_ReadIoVal &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSDA
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSCL
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDS3231Byte
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFM24CL64
</UL>

<P><STRONG><a name="[198]"></a>nop</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, softspi_17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nop &rArr; NOP &rArr; FeedDog
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOP
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMISOF
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMISOF
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMOSIF
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMOSIF
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSCKF
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSCKF
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoftSpiCSF
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadIC_SWT
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCS_IC
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePOW_IC
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoftSpiCSIC
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMISO_IC
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMISO_IC
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMOSI_IC
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSCK_IC
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSCK_IC
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoftSpiCS0
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMISO0
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSDA
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSDA
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSCL
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSCL
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSoftSpiCS1
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMISO1
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMISO1
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMOSI1
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMOSI1
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSCK1
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSCK1
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLOCO_BK
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLOCO_ZD
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLOCO_QY
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLOCO_LW
</UL>

<P><STRONG><a name="[2c4]"></a>InitFlshIO</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, softspi_17xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinselConfig
</UL>

<P><STRONG><a name="[2c5]"></a>WriteSCK0</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, softspi_17xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOrClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOrRecByte_SPI0
</UL>

<P><STRONG><a name="[2c6]"></a>ReadSCK0</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, softspi_17xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadIoVal
</UL>

<P><STRONG><a name="[2c7]"></a>WriteMOSI0</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, softspi_17xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOrClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOrRecByte_SPI0
</UL>

<P><STRONG><a name="[2c8]"></a>ReadMOSI0</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, softspi_17xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadIoVal
</UL>

<P><STRONG><a name="[2c9]"></a>WriteMISO0</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, softspi_17xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOrClearValue
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinselConfig
</UL>

<P><STRONG><a name="[2ca]"></a>ReadMISO0</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, softspi_17xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nop
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadIoVal
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOrRecByte_SPI0
</UL>

<P><STRONG><a name="[2cb]"></a>WriteSoftSpiCS0</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, softspi_17xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nop
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOrClearValue
</UL>

<P><STRONG><a name="[2cc]"></a>SendOrRecByte_SPI0</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, softspi_17xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMISO0
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMOSI0
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSCK0
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecByte_SPI0
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendByte_SPI0
</UL>

<P><STRONG><a name="[2cd]"></a>SendByte_SPI0</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, softspi_17xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOrRecByte_SPI0
</UL>

<P><STRONG><a name="[2ce]"></a>RecByte_SPI0</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, softspi_17xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOrRecByte_SPI0
</UL>

<P><STRONG><a name="[219]"></a>SetLedFlg</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, flgmanager.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestSoftCOM
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSNR_RecDealHostDip
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HdlcSendDeal
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HdlcRecDeal
</UL>

<P><STRONG><a name="[218]"></a>ManageLedFlg</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, flgmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = ManageLedFlg &rArr; OnLed &rArr; LightLed &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnLed
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OffLed
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestSoftCOM
</UL>

<P><STRONG><a name="[2cf]"></a>WriteFRAM_PROTECT</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fram.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFM24CL64
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFM24CL64
</UL>

<P><STRONG><a name="[23b]"></a>WriteFM24CL64</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, fram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = WriteFM24CL64 &rArr; WriteByteWithI2C &rArr; WriteSDA &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFRAM_PROTECT
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByteWithI2C
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopI2C
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartI2C
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSlaveAckI2C
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreSetModelVal
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFramOneWord
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreFixInfo
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreHostInfo
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreSelectModel
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreAddDipVal
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreReviseHight
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreDensity
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreOilBoxModel
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreSysRunPara
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLstRedFlshRecNum_gprs
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLstRedFlshRecNum
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreCurFlshRecNum
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoresDistFram
</UL>

<P><STRONG><a name="[282]"></a>ReadFM24CL64</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, fram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ReadFM24CL64 &rArr; WriteByteWithI2C &rArr; WriteSDA &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFRAM_PROTECT
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasterAckI2C
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByteWithI2C
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopI2C
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartI2C
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByteWithI2C
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasterNoAckI2C
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSlaveAckI2C
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunPara
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFramOneWord
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSelectModel
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAddDipVal
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOilBoxModelsModelSemple
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOilBoxModelsModel
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadOilBoxModel
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLstRedFlshRecNum_gprs
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLstRedFlshRecNum
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadReviseHight
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHostInfo
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFixInfo
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDensity
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurFlshRecNum
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDistFram
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetModel
</UL>

<P><STRONG><a name="[40c]"></a>GetDf4bOilBoxModel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dealoilbox.o(.text), UNUSED)

<P><STRONG><a name="[40d]"></a>GetDf7xOilBoxModel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dealoilbox.o(.text), UNUSED)

<P><STRONG><a name="[40e]"></a>GetDf7G80OilBoxModel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dealoilbox.o(.text), UNUSED)

<P><STRONG><a name="[40f]"></a>GetDf7G60OilBoxModel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dealoilbox.o(.text), UNUSED)

<P><STRONG><a name="[410]"></a>GetDf7G20OilBoxModel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dealoilbox.o(.text), UNUSED)

<P><STRONG><a name="[411]"></a>GetDf7G50OilBoxModel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dealoilbox.o(.text), UNUSED)

<P><STRONG><a name="[412]"></a>GetDf12G50OilBoxModel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dealoilbox.o(.text), UNUSED)

<P><STRONG><a name="[413]"></a>GetDf12G40OilBoxModel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dealoilbox.o(.text), UNUSED)

<P><STRONG><a name="[414]"></a>GetDf12G17OilBoxModel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dealoilbox.o(.text), UNUSED)

<P><STRONG><a name="[415]"></a>GetDf5G20OilBoxModel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dealoilbox.o(.text), UNUSED)

<P><STRONG><a name="[416]"></a>GetDf7C5675OilBoxModel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dealoilbox.o(.text), UNUSED)

<P><STRONG><a name="[2d0]"></a>GetDf4dOilBoxModel</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, dealoilbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetDf4dOilBoxModel &rArr; GetCrc16Check
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOilBoxModel
</UL>

<P><STRONG><a name="[24a]"></a>GetOilBoxCod</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, dealoilbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GetOilBoxCod &rArr; ReadSelectModel &rArr; ReadFM24CL64 &rArr; WriteByteWithI2C &rArr; WriteSDA &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSelectModel
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrinfSysInfo
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreData
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOilBoxModel
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOilBoxModelsModelSemple
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOilBoxModelsModel
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostScan
</UL>

<P><STRONG><a name="[2d1]"></a>stcModelTostcModelComplex</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dealoilbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stcModelTostcModelComplex &rArr; GetCrc16Check
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOilBoxModel
</UL>

<P><STRONG><a name="[2d2]"></a>stcModelSempleTostcModelComplex</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, dealoilbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stcModelSempleTostcModelComplex &rArr; GetCrc16Check
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOilBoxModel
</UL>

<P><STRONG><a name="[2d3]"></a>stcModelComplexTostcModel</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, dealoilbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[2d4]"></a>stcModelComplexToMulstcModel</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, dealoilbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[417]"></a>stcModelComplexTostcModelSemple</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dealoilbox.o(.text), UNUSED)

<P><STRONG><a name="[2d5]"></a>GetHxn5OilBoxModel</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dealoilbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetHxn5OilBoxModel &rArr; GetCrc16Check
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOilBoxModel
</UL>

<P><STRONG><a name="[2d6]"></a>GetOilBoxModel</STRONG> (Thumb, 112 bytes, Stack size 272 bytes, dealoilbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = GetOilBoxModel &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHxn5OilBoxModel
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stcModelSempleTostcModelComplex
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stcModelTostcModelComplex
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDf4dOilBoxModel
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOilBoxModelsModelSemple
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOilBoxModelsModel
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOilBoxCod
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMathModelPara
</UL>

<P><STRONG><a name="[2d7]"></a>GetStoreTime</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, storerec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = GetStoreTime &rArr; GetSysRunPara &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunPara
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreDataPro
</UL>

<P><STRONG><a name="[265]"></a>GetRecNumAddr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, storerec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTask
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreData
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlshRec
</UL>

<P><STRONG><a name="[2da]"></a>GetRecTyp</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, storerec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreData
</UL>

<P><STRONG><a name="[2dc]"></a>GetMyMstLocoPower</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, storerec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreData
</UL>

<P><STRONG><a name="[2d8]"></a>ReadFlshRec</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, storerec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ReadFlshRec &rArr; ReadFlsh &rArr; MX25L1602_RD &rArr; Get_Byte &rArr; RecByte_SPIF &rArr; SendOrRecByte_SPIF &rArr; ReadMISOF &rArr; GPIO_ReadIoVal &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlsh
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecNumAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreCardRec
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreData
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSendData
</UL>

<P><STRONG><a name="[2d9]"></a>StoreData</STRONG> (Thumb, 394 bytes, Stack size 176 bytes, storerec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = StoreData &rArr; WriteFlsh &rArr; MX25L1602_WR &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMySpeed2
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMySpeed1
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMyLocoWorkState
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMyEngRotSpd
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMyDip2Tmp
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMyDip2Den
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMyDip1Tmp
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMyDip1Den
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDip2Hig
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDip1Hig
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurFlshRecNum
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlsh
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAddSpeed
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMyDip2Err
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMyDip1Err
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHostErrNum
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetErrorCode
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMyKileMeter
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDensityVal
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlshRec
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMyMstLocoPower
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecTyp
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTime
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreCurFlshRecNum
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFixInfo
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecNumAddr
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOilBoxCod
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreDataPro
</UL>

<P><STRONG><a name="[2e1]"></a>StoreDataPro</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, storerec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = StoreDataPro &rArr; StoreData &rArr; WriteFlsh &rArr; MX25L1602_WR &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreData
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStoreTime
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreRecTask
</UL>

<P><STRONG><a name="[10d]"></a>StoreRecTask</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, storerec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = StoreRecTask &rArr; StoreDataPro &rArr; StoreData &rArr; WriteFlsh &rArr; MX25L1602_WR &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreDataPro
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e2]"></a>GetDebugModelDisHig</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mathdipval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = GetDebugModelDisHig &rArr; GetSysRunPara &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunPara
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcDip
</UL>

<P><STRONG><a name="[2e3]"></a>GetNoAvgFlg</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mathdipval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = GetNoAvgFlg &rArr; GetSysRunPara &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunPara
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcDip
</UL>

<P><STRONG><a name="[2e5]"></a>GetDip10SecChg</STRONG> (Thumb, 174 bytes, Stack size 12 bytes, mathdipval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetDip10SecChg
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrqChgState
</UL>

<P><STRONG><a name="[2e4]"></a>GetFrqChgState</STRONG> (Thumb, 378 bytes, Stack size 12 bytes, mathdipval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetFrqChgState &rArr; GetDip10SecChg
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDip10SecChg
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMathPara
</UL>

<P><STRONG><a name="[2e6]"></a>GetDipPrsAvg</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, mathdipval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetDipPrsAvg &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMyDip2Err
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMyDip1Err
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMathPara
</UL>

<P><STRONG><a name="[2e7]"></a>GetMathPara</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mathdipval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GetMathPara &rArr; GetDipPrsAvg &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDip2Hig
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDip1Hig
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDipPrsAvg
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrqChgState
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcDip
</UL>

<P><STRONG><a name="[418]"></a>MinToMaxOder</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, mathdipval.o(.text), UNUSED)

<P><STRONG><a name="[2e9]"></a>GetPrsChgState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mathdipval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeOilEvt
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDipPrs30SecVal
</UL>

<P><STRONG><a name="[2e8]"></a>GetDipPrs30SecVal</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, mathdipval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = GetDipPrs30SecVal &rArr; GetSysTime &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPrsChgState
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcDip
</UL>

<P><STRONG><a name="[23d]"></a>GetMathModelPara</STRONG> (Thumb, 318 bytes, Stack size 56 bytes, mathdipval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = GetMathModelPara &rArr; GetOilBoxModel &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOilBoxModel
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAddDipVal
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadReviseHight
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDensity
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DipModelSet
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReCalPara
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDipMathVal
</UL>

<P><STRONG><a name="[340]"></a>GetSetParaFlg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mathdipval.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeCardEvt
</UL>

<P><STRONG><a name="[341]"></a>SetParaFlgTrue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mathdipval.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeCardEvt
</UL>

<P><STRONG><a name="[2dd]"></a>GetDensityVal</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mathdipval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetDensityVal &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreData
</UL>

<P><STRONG><a name="[2ee]"></a>GetReviseHight</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mathdipval.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>

<P><STRONG><a name="[2ef]"></a>GetDipMathVal</STRONG> (Thumb, 458 bytes, Stack size 72 bytes, mathdipval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = GetDipMathVal &rArr; GetMathModelPara &rArr; GetOilBoxModel &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMathModelPara
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySet
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcDip
</UL>

<P><STRONG><a name="[2f8]"></a>GetModelErrFlg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mathdipval.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeCalcError
</UL>

<P><STRONG><a name="[2f7]"></a>GetDensityErrFlg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mathdipval.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeCalcError
</UL>

<P><STRONG><a name="[2f9]"></a>GetModelParaErrFlg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mathdipval.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeCalcError
</UL>

<P><STRONG><a name="[2f4]"></a>ReCalPara</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mathdipval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = ReCalPara &rArr; GetMathModelPara &rArr; GetOilBoxModel &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMathModelPara
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarddataOperate
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperationCard
</UL>

<P><STRONG><a name="[10c]"></a>CalcDip</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, mathdipval.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = CalcDip &rArr; GetDipMathVal &rArr; GetMathModelPara &rArr; GetOilBoxModel &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSetModelFlg
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDipMathVal
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDipPrs30SecVal
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMathPara
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNoAvgFlg
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDebugModelDisHig
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f6]"></a>JudgeCalcError</STRONG> (Thumb, 224 bytes, Stack size 4 bytes, mathdipval.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModelParaErrFlg
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDensityErrFlg
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModelErrFlg
</UL>

<P><STRONG><a name="[1fc]"></a>JudgeOilEvt</STRONG> (Thumb, 140 bytes, Stack size 4 bytes, mathdipval.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPrsChgState
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeHostEvt
</UL>

<P><STRONG><a name="[2fa]"></a>WriteSCK_IC</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, card.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nop
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOrClearValue
</UL>

<P><STRONG><a name="[2fb]"></a>ReadSCK_IC</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, card.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nop
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadIoVal
</UL>

<P><STRONG><a name="[2fc]"></a>WriteMOSI_IC</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, card.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOrClearValue
</UL>

<P><STRONG><a name="[2fd]"></a>ReadMOSI_IC</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, card.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nop
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadIoVal
</UL>

<P><STRONG><a name="[2fe]"></a>WriteMISO_IC</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, card.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nop
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOrClearValue
</UL>

<P><STRONG><a name="[2ff]"></a>SSP0_Init</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, card.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SSP0_Init &rArr; SSP_Init &rArr; setSSPclock &rArr; CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Cmd
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_ConfigStructInit
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCardIO
</UL>

<P><STRONG><a name="[255]"></a>InitCardIO</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, card.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = InitCardIO &rArr; SSP0_Init &rArr; SSP_Init &rArr; setSSPclock &rArr; CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinselConfig
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneTask
</UL>

<P><STRONG><a name="[301]"></a>ReadMISO_IC</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, card.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nop
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadIoVal
</UL>

<P><STRONG><a name="[302]"></a>WriteSoftSpiCSIC</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, card.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nop
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOrClearValue
</UL>

<P><STRONG><a name="[304]"></a>SendOrRecByte_SPI_IC</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, card.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecByte_SPI_IC
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendByte_SPI_IC
</UL>

<P><STRONG><a name="[303]"></a>SendByte_SPI_IC</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, card.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOrRecByte_SPI_IC
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SentByte_SPI
</UL>

<P><STRONG><a name="[305]"></a>RecByte_SPI_IC</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, card.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOrRecByte_SPI_IC
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevByte_SPI
</UL>

<P><STRONG><a name="[306]"></a>SentByte_SPI</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, card.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendByte_SPI_IC
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferToMainMemoryPageProgramWithBuilt_inErase_Card
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferWrite_Card
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferRead_Card
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMemoryToBuff
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinuousArrayRead_Card
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatusRegisterRead_Card
</UL>

<P><STRONG><a name="[307]"></a>RevByte_SPI</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, card.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecByte_SPI_IC
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferRead_Card
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinuousArrayRead_Card
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatusRegisterRead_Card
</UL>

<P><STRONG><a name="[308]"></a>WritePOW_IC</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, card.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nop
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOrClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlugICCard
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPlugFlg
</UL>

<P><STRONG><a name="[309]"></a>WriteCS_IC</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, card.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nop
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOrClearValue
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinselConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferToMainMemoryPageProgramWithBuilt_inErase_Card
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferWrite_Card
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferRead_Card
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMemoryToBuff
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinuousArrayRead_Card
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatusRegisterRead_Card
</UL>

<P><STRONG><a name="[30a]"></a>WriteIC_RST</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, card.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOrClearValue
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinselConfig
</UL>

<P><STRONG><a name="[30b]"></a>WriteIC_SWT</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, card.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOrClearValue
</UL>

<P><STRONG><a name="[30c]"></a>ReadIC_SWT</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, card.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nop
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadIoVal
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlugCard
</UL>

<P><STRONG><a name="[30d]"></a>StatusRegisterRead_Card</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, card.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCS_IC
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevByte_SPI
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SentByte_SPI
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlugICCard
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferToMainMemoryPageProgramWithBuilt_inErase_Card
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferRead_Card
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMemoryToBuff
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinuousArrayRead_Card
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCardInfo
</UL>

<P><STRONG><a name="[30e]"></a>InitCardInfo</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, card.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatusRegisterRead_Card
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlugICCard
</UL>

<P><STRONG><a name="[320]"></a>GetCardPageSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, card.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWritePageLen
</UL>

<P><STRONG><a name="[30f]"></a>ContinuousArrayRead_Card</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, card.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatusRegisterRead_Card
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCS_IC
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevByte_SPI
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SentByte_SPI
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCardPage
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCard
</UL>

<P><STRONG><a name="[310]"></a>MainMemoryToBuff</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, card.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatusRegisterRead_Card
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCS_IC
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SentByte_SPI
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferRead_Card
</UL>

<P><STRONG><a name="[311]"></a>BufferRead_Card</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, card.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMemoryToBuff
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatusRegisterRead_Card
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCS_IC
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevByte_SPI
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SentByte_SPI
</UL>

<P><STRONG><a name="[312]"></a>BufferWrite_Card</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, card.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCS_IC
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SentByte_SPI
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferToMainMemoryPageProgramWithBuilt_inErase_Card
</UL>

<P><STRONG><a name="[313]"></a>BufferToMainMemoryPageProgramWithBuilt_inErase_Card</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, card.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferWrite_Card
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatusRegisterRead_Card
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCS_IC
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SentByte_SPI
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCardPage
</UL>

<P><STRONG><a name="[314]"></a>ReadCard</STRONG> (Thumb, 206 bytes, Stack size 64 bytes, card.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinuousArrayRead_Card
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCard
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCardPara
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModCard
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCardFlg
</UL>

<P><STRONG><a name="[315]"></a>WriteCardPage</STRONG> (Thumb, 178 bytes, Stack size 1056 bytes, card.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferToMainMemoryPageProgramWithBuilt_inErase_Card
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinuousArrayRead_Card
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCard
</UL>

<P><STRONG><a name="[316]"></a>WriteCard</STRONG> (Thumb, 240 bytes, Stack size 64 bytes, card.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCardPage
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCard
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreCardRec
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCardPara
</UL>

<P><STRONG><a name="[32b]"></a>GetToEndLen</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, card.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCard
</UL>

<P><STRONG><a name="[317]"></a>PlugCard</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, card.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadIC_SWT
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HoldCard
</UL>

<P><STRONG><a name="[318]"></a>HoldCard</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, card.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlugCard
</UL>

<P><STRONG><a name="[31b]"></a>GetPlugTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, card.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongTimePlugCard
</UL>

<P><STRONG><a name="[319]"></a>GetPlugFlg</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, card.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePOW_IC
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeCardEvt
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreCardRec
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlugICCard
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpandCard
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperationCard
</UL>

<P><STRONG><a name="[33d]"></a>ResetPlugFlgEvt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, card.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeCardEvt
</UL>

<P><STRONG><a name="[31a]"></a>LongTimePlugCard</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, card.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPlugTime
</UL>

<P><STRONG><a name="[31e]"></a>GetLongTimePlugCardErrFlg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, card.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeCardError
</UL>

<P><STRONG><a name="[31c]"></a>PlugICCard</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, card.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOP
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayX10ms
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPlugFlg
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCardInfo
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatusRegisterRead_Card
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePOW_IC
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperationCard
</UL>

<P><STRONG><a name="[31d]"></a>GetCardErrorFlg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, card.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeCardError
</UL>

<P><STRONG><a name="[1ee]"></a>JudgeCardError</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, card.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCardErrorFlg
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLongTimePlugCardErrFlg
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrDealSys
</UL>

<P><STRONG><a name="[31f]"></a>GetWritePageLen</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, datacard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCardPageSize
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreCardRec
</UL>

<P><STRONG><a name="[321]"></a>FlshRecToCardRec</STRONG> (Thumb, 36 bytes, Stack size 152 bytes, datacard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[322]"></a>ReadCardDisplay</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, datacard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ReadCardDisplay &rArr; DisplaySet &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySet
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreCardRec
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarddataOperate
</UL>

<P><STRONG><a name="[323]"></a>StoreCardRec</STRONG> (Thumb, 130 bytes, Stack size 1200 bytes, datacard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCardDisplay
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWritePageLen
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPlugFlg
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCard
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlshRec
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCard
</UL>

<P><STRONG><a name="[32c]"></a>GetReadFlshRecCnt</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, datacard.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCard
</UL>

<P><STRONG><a name="[324]"></a>IndicateWriteCardFinsh</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, datacard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = IndicateWriteCardFinsh &rArr; DisplaySet &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClaerDisplaySetWithoutStore
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySet
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayX10ms
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCard
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarddataOperate
</UL>

<P><STRONG><a name="[325]"></a>IndicateWriteCardFlgErr</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, datacard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnLed
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySet
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayX10ms
</UL>

<P><STRONG><a name="[326]"></a>IndicateUSBFlgErr</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, datacard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnLed
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySet
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayX10ms
</UL>

<P><STRONG><a name="[327]"></a>IndicateRecordFinsh</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, datacard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClaerDisplaySetWithoutStore
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnLed
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySet
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayX10ms
</UL>

<P><STRONG><a name="[328]"></a>IndicateCardFull</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, datacard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClaerDisplaySetWithoutStore
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnLed
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySet
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCard
</UL>

<P><STRONG><a name="[329]"></a>IndicateWriteNoFinsh</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, datacard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClaerDisplaySetWithoutStore
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySet
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCard
</UL>

<P><STRONG><a name="[32a]"></a>DataCard</STRONG> (Thumb, 554 bytes, Stack size 160 bytes, datacard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayX10ms
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicateWriteNoFinsh
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicateCardFull
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicateWriteCardFinsh
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReadFlshRecCnt
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreCardRec
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetToEndLen
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCard
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCard
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLstRedFlshRecNum
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLstRedFlshRecNum
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHostInfo
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFixInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DenDataCard
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperationCard
</UL>

<P><STRONG><a name="[419]"></a>DataCardPartRead</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, datacard.o(.text), UNUSED)

<P><STRONG><a name="[33e]"></a>GetUnFihCardEvtFlg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, datacard.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeCardEvt
</UL>

<P><STRONG><a name="[33f]"></a>ResetUnFihCardEvtFlg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, datacard.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeCardEvt
</UL>

<P><STRONG><a name="[32d]"></a>ReadCopyCardDisplay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, datacard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySet
</UL>

<P><STRONG><a name="[41a]"></a>GetCardMaxRecNum</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, datacard.o(.text), UNUSED)

<P><STRONG><a name="[32e]"></a>ReadCardFlg</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, operatecard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCard
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperationCard
</UL>

<P><STRONG><a name="[41b]"></a>WriteCardFlg</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, operatecard.o(.text), UNUSED)

<P><STRONG><a name="[32f]"></a>IndicatePullOutCard</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, operatecard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OffLed
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperationCard
</UL>

<P><STRONG><a name="[330]"></a>IndicateCardTypErr</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, operatecard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClaerDisplaySetWithoutStore
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnLed
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySet
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperationCard
</UL>

<P><STRONG><a name="[331]"></a>IndicateCardNoSet</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, operatecard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClaerDisplaySetWithoutStore
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnLed
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySet
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperationCard
</UL>

<P><STRONG><a name="[332]"></a>IndicateCardNoDef</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, operatecard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClaerDisplaySetWithoutStore
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnLed
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySet
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperationCard
</UL>

<P><STRONG><a name="[333]"></a>OperationCard</STRONG> (Thumb, 788 bytes, Stack size 8 bytes, operatecard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOP
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnLed
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OffLed
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySet
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayX10ms
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCard
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlugICCard
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPlugFlg
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReCalPara
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OffAllLed
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResumeDisplaySet
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClaerDisplaySet
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDataCard
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelSelectCard
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModCard
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HightCard
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixCard
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpandCard
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DensityCard
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DenDataCard
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicateCardNoDef
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicateCardNoSet
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicateCardTypErr
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicatePullOutCard
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCardFlg
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardTask
</UL>

<P><STRONG><a name="[33c]"></a>CardTask</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, operatecard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperationCard
</UL>

<P><STRONG><a name="[1fe]"></a>JudgeCardEvt</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, operatecard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetUnFihCardEvtFlg
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUnFihCardEvtFlg
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetPlugFlgEvt
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPlugFlg
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetParaFlgTrue
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSetParaFlg
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetReadDataFlgTrue
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReadDataFlg
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvtDealSys
</UL>

<P><STRONG><a name="[349]"></a>SetSucceedIndicate</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, paracard.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFix
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSel
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHight
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDen
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCardDensityVal
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelSelectCard
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HightCard
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixCard
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DensityCard
</UL>

<P><STRONG><a name="[344]"></a>StoreErrIndicate</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, paracard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = StoreErrIndicate &rArr; DisplaySet &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySet
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFix
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSel
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHight
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDen
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCardDensityVal
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelSelectCard
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HightCard
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixCard
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DensityCard
</UL>

<P><STRONG><a name="[345]"></a>CrcCheckErrIndicate</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, paracard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySet
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCardDensityVal
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelSelectCard
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HightCard
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixCard
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DensityCard
</UL>

<P><STRONG><a name="[335]"></a>ModCard</STRONG> (Thumb, 94 bytes, Stack size 272 bytes, paracard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySet
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCard
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreOilBoxModel
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperationCard
</UL>

<P><STRONG><a name="[346]"></a>ReadCardPara</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, paracard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCard
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCardDensityVal
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDataCard
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelSelectCard
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HightCard
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixCard
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpandCard
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DensityCard
</UL>

<P><STRONG><a name="[347]"></a>WriteCardPara</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, paracard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCard
</UL>

<P><STRONG><a name="[348]"></a>GetCardDensityVal</STRONG> (Thumb, 86 bytes, Stack size 216 bytes, paracard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySet
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreDensity
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCardPara
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrcCheckErrIndicate
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreErrIndicate
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSucceedIndicate
</UL>

<P><STRONG><a name="[334]"></a>DensityCard</STRONG> (Thumb, 86 bytes, Stack size 216 bytes, paracard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySet
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreDensity
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCardPara
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrcCheckErrIndicate
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreErrIndicate
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSucceedIndicate
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DenDataCard
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperationCard
</UL>

<P><STRONG><a name="[33b]"></a>DenDataCard</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, paracard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySet
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCard
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DensityCard
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperationCard
</UL>

<P><STRONG><a name="[336]"></a>SetDataCard</STRONG> (Thumb, 16 bytes, Stack size 184 bytes, paracard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCardPara
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperationCard
</UL>

<P><STRONG><a name="[337]"></a>HightCard</STRONG> (Thumb, 216 bytes, Stack size 200 bytes, paracard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySet
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayX10ms
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreReviseHight
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadReviseHight
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCardPara
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrcCheckErrIndicate
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreErrIndicate
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSucceedIndicate
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperationCard
</UL>

<P><STRONG><a name="[338]"></a>ModelSelectCard</STRONG> (Thumb, 62 bytes, Stack size 192 bytes, paracard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySet
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreSelectModel
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCardPara
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrcCheckErrIndicate
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreErrIndicate
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSucceedIndicate
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperationCard
</UL>

<P><STRONG><a name="[339]"></a>FixCard</STRONG> (Thumb, 110 bytes, Stack size 216 bytes, paracard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySet
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreFixInfo
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCardPara
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrcCheckErrIndicate
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreErrIndicate
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSucceedIndicate
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperationCard
</UL>

<P><STRONG><a name="[33a]"></a>ExpandCard</STRONG> (Thumb, 362 bytes, Stack size 224 bytes, paracard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySet
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayX10ms
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPlugFlg
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTime
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTime
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCardPara
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperationCard
</UL>

<P><STRONG><a name="[34a]"></a>SetDen</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, equimentoperate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = SetDen &rArr; StoreErrIndicate &rArr; DisplaySet &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySet
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreDensity
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreErrIndicate
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSucceedIndicate
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarddataOperate
</UL>

<P><STRONG><a name="[34b]"></a>SetHight</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, equimentoperate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = SetHight &rArr; ReadReviseHight &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySet
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayX10ms
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreReviseHight
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadReviseHight
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreErrIndicate
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSucceedIndicate
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarddataOperate
</UL>

<P><STRONG><a name="[34c]"></a>SetSel</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, equimentoperate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = SetSel &rArr; StoreErrIndicate &rArr; DisplaySet &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySet
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreSelectModel
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreErrIndicate
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSucceedIndicate
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarddataOperate
</UL>

<P><STRONG><a name="[34d]"></a>SetFix</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, equimentoperate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = SetFix &rArr; StoreErrIndicate &rArr; DisplaySet &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySet
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreFixInfo
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreErrIndicate
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSucceedIndicate
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarddataOperate
</UL>

<P><STRONG><a name="[35f]"></a>GetModelCardFlg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, equimentoperate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EquipmentComTask
</UL>

<P><STRONG><a name="[41c]"></a>ClearModelCardFlg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, equimentoperate.o(.text), UNUSED)

<P><STRONG><a name="[34e]"></a>SetModel</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, equimentoperate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = SetModel &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFM24CL64
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreOilBoxModel
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarddataOperate
</UL>

<P><STRONG><a name="[34f]"></a>ComSendData</STRONG> (Thumb, 664 bytes, Stack size 168 bytes, equimentoperate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = ComSendData &rArr; DataSend_CSNR &rArr; SendCOM1 &rArr; UART_Send &rArr; UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataSend_CSNR
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlshRec
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLstRedFlshRecNum_gprs
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLstRedFlshRecNum
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLstRedFlshRecNum_gprs
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLstRedFlshRecNum
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecaddr
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EquipmentComTask
</UL>

<P><STRONG><a name="[25e]"></a>GetLed1Com2Flg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, equimentcom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedTast
</UL>

<P><STRONG><a name="[25f]"></a>GetLed2Com3Flg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, equimentcom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedTast
</UL>

<P><STRONG><a name="[351]"></a>GetFramRecEndFlgCom2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, equimentcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = GetFramRecEndFlgCom2 &rArr; GetCOM2EndFlg &rArr; HoldCOM2ConnSta &rArr; GetSysTime &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCOM2EndFlg
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSNR_RecDeal
</UL>

<P><STRONG><a name="[352]"></a>GetFramRecEndFlgCom3</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, equimentcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = GetFramRecEndFlgCom3 &rArr; GetCOM3EndFlg &rArr; HoldCOM3ConnSta &rArr; GetSysTime &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCOM3EndFlg
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSNR_RecDeal
</UL>

<P><STRONG><a name="[353]"></a>ClearFramRecEndFlgCom3</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, equimentcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ClearFramRecEndFlgCom3 &rArr; ClearCOM3EndFlg
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearCOM3EndFlg
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSNR_RecDeal
</UL>

<P><STRONG><a name="[354]"></a>ClearFramRecEndFlgCom2</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, equimentcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ClearFramRecEndFlgCom2 &rArr; ClearCOM2EndFlg
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearCOM2EndFlg
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSNR_RecDeal
</UL>

<P><STRONG><a name="[27f]"></a>ClearFramRecEndFlg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, equimentcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ClearFramRecEndFlg &rArr; ClearCOM1EndFlg
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearCOM1EndFlg
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSNR_RecDealHostDip
</UL>

<P><STRONG><a name="[355]"></a>ReadRs485DataCom2</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, equimentcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ReadRs485DataCom2 &rArr; ReadCOM2 &rArr; ReadFIFO &rArr; GetNoReadSizeFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCOM2
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSNR_RecDeal
</UL>

<P><STRONG><a name="[356]"></a>ReadRs485DataCom3</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, equimentcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ReadRs485DataCom3 &rArr; ReadCOM3 &rArr; ReadFIFO &rArr; GetNoReadSizeFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCOM3
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSNR_RecDeal
</UL>

<P><STRONG><a name="[350]"></a>GetRecaddr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, equimentcom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSendData
</UL>

<P><STRONG><a name="[35c]"></a>GetRecFlg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, equimentcom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostScan
</UL>

<P><STRONG><a name="[35d]"></a>GetSendDataComFlg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, equimentcom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EquipmentComTask
</UL>

<P><STRONG><a name="[35e]"></a>ClearSendDataComFlg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, equimentcom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EquipmentComTask
</UL>

<P><STRONG><a name="[111]"></a>GetReadDataDisplayTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, equimentcom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[357]"></a>CarddataOperate</STRONG> (Thumb, 478 bytes, Stack size 64 bytes, equimentcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = CarddataOperate &rArr; ReCalPara &rArr; GetMathModelPara &rArr; GetOilBoxModel &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClaerDisplaySetWithoutStore
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySet
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IndicateWriteCardFinsh
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCardDisplay
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReCalPara
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTime
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreSysRunPara
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLstRedFlshRecNum_gprs
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLstRedFlshRecNum
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreCurFlshRecNum
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetModel
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFix
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSel
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHight
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDen
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSNR_RecDeal
</UL>

<P><STRONG><a name="[358]"></a>CSNR_RecDeal</STRONG> (Thumb, 378 bytes, Stack size 528 bytes, equimentcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336 + Unknown Stack Size
<LI>Call Chain = CSNR_RecDeal &rArr; CarddataOperate &rArr; ReCalPara &rArr; GetMathModelPara &rArr; GetOilBoxModel &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSNR_GetData
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarddataOperate
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRs485DataCom3
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRs485DataCom2
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearFramRecEndFlgCom2
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearFramRecEndFlgCom3
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFramRecEndFlgCom3
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFramRecEndFlgCom2
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EquipmentComTask
</UL>

<P><STRONG><a name="[35a]"></a>GetHostBuf</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, equimentcom.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostStationSend_CSNR
</UL>

<P><STRONG><a name="[359]"></a>HostStationSend_CSNR</STRONG> (Thumb, 258 bytes, Stack size 80 bytes, equimentcom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataSend_CSNR
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHostBuf
</UL>

<P><STRONG><a name="[35b]"></a>HostScan</STRONG> (Thumb, 158 bytes, Stack size 64 bytes, equimentcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = HostScan &rArr; DataSend_CSNR &rArr; SendCOM1 &rArr; UART_Send &rArr; UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataSend_CSNR
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOilBoxCod
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecFlg
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EquipmentComTask
</UL>

<P><STRONG><a name="[10b]"></a>EquipmentComTask</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, equimentcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344 + Unknown Stack Size
<LI>Call Chain = EquipmentComTask &rArr; CSNR_RecDeal &rArr; CarddataOperate &rArr; ReCalPara &rArr; GetMathModelPara &rArr; GetOilBoxModel &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CirculatesTask
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostScan
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSNR_RecDeal
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSendDataComFlg
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSendDataComFlg
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSendData
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModelCardFlg
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[360]"></a>StoresDistFram</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, storespeed.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = StoresDistFram &rArr; WriteFM24CL64 &rArr; WriteByteWithI2C &rArr; WriteSDA &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFM24CL64
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoresDist
</UL>

<P><STRONG><a name="[361]"></a>ReadDistFram</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, storespeed.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = ReadDistFram &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16Check
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFM24CL64
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDist
</UL>

<P><STRONG><a name="[362]"></a>ReadDist</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, storespeed.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = ReadDist &rArr; ReadDistFram &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDistFram
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcDist
</UL>

<P><STRONG><a name="[363]"></a>StoresDist</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, storespeed.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = StoresDist &rArr; StoresDistFram &rArr; WriteFM24CL64 &rArr; WriteByteWithI2C &rArr; WriteSDA &rArr; GPIO_SetOrClearValue &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoresDistFram
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcDist
</UL>

<P><STRONG><a name="[367]"></a>GetFrq1SumCnt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, speed1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcDist
</UL>

<P><STRONG><a name="[101]"></a>GetMySpeed1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, speed1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedTast
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfComSysInfo
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOnceInfo
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSpeed
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreData
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcDist
</UL>

<P><STRONG><a name="[232]"></a>GetMyAddSpeed1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, speed1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAddSpeed
</UL>

<P><STRONG><a name="[364]"></a>GetSpeedPluse1</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, speed1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = GetSpeedPluse1 &rArr; GetSysTime &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSpeed1
</UL>

<P><STRONG><a name="[365]"></a>CalcSpeed1</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, speed1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = CalcSpeed1 &rArr; GetSpeedPluse1 &rArr; GetSysTime &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSpeedPluse1
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedAndDistTast
</UL>

<P><STRONG><a name="[2db]"></a>GetMyKileMeter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, speed1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreData
</UL>

<P><STRONG><a name="[366]"></a>CalcDist</STRONG> (Thumb, 144 bytes, Stack size 64 bytes, speed1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = CalcDist &rArr; ReadDist &rArr; ReadDistFram &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMySpeed1
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrq2SumCnt
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFrq1SumCnt
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoresDist
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDist
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedAndDistTast
</UL>

<P><STRONG><a name="[10e]"></a>SpeedAndDistTast</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, speed1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = SpeedAndDistTast &rArr; CalcDist &rArr; ReadDist &rArr; ReadDistFram &rArr; printfcom0 &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSpeedcs
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSpeed2
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcDist
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSpeed1
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[368]"></a>GetFrq2SumCnt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, speed2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcDist
</UL>

<P><STRONG><a name="[11]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, speed2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER1_IRQHandler &rArr; TIM_GetCaptureValue
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCaptureValue
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ResetCounter
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearIntCapturePending
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetIntCaptureStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[100]"></a>GetMySpeed2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, speed2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedTast
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfComSysInfo
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOnceInfo
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSpeed
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreData
</UL>

<P><STRONG><a name="[233]"></a>GetMyAddSpeed2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, speed2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAddSpeed
</UL>

<P><STRONG><a name="[36b]"></a>GetSpeedPluse2</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, speed2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = GetSpeedPluse2 &rArr; GetSysTime &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSpeed2
</UL>

<P><STRONG><a name="[369]"></a>CalcSpeed2</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, speed2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = CalcSpeed2 &rArr; GetSpeedPluse2 &rArr; GetSysTime &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSpeedPluse2
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedAndDistTast
</UL>

<P><STRONG><a name="[41d]"></a>GetFrq3SumCnt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mstcsspeed.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>GetMyEngRotSpd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mstcsspeed.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedTast
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfComSysInfo
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOnceInfo
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreData
</UL>

<P><STRONG><a name="[36c]"></a>GetSpeedPlusecs</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, mstcsspeed.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = GetSpeedPlusecs &rArr; GetSysTime &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSpeedcs
</UL>

<P><STRONG><a name="[36a]"></a>CalcSpeedcs</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, mstcsspeed.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = CalcSpeedcs &rArr; GetSpeedPlusecs &rArr; GetSysTime &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSpeedPlusecs
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedAndDistTast
</UL>

<P><STRONG><a name="[36d]"></a>InitLocoStaIO</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, locoworksta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinselConfig
</UL>

<P><STRONG><a name="[36e]"></a>ReadLOCO_LW</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, locoworksta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ReadLOCO_LW &rArr; GPIO_ReadIoVal &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nop
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadIoVal
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLocoStaTask
</UL>

<P><STRONG><a name="[36f]"></a>ReadLOCO_QY</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, locoworksta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ReadLOCO_QY &rArr; GPIO_ReadIoVal &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nop
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadIoVal
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLocoStaTask
</UL>

<P><STRONG><a name="[370]"></a>ReadLOCO_ZD</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, locoworksta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ReadLOCO_ZD &rArr; GPIO_ReadIoVal &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nop
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadIoVal
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLocoStaTask
</UL>

<P><STRONG><a name="[371]"></a>ReadLOCO_BK</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, locoworksta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ReadLOCO_BK &rArr; GPIO_ReadIoVal &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nop
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadIoVal
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLocoStaTask
</UL>

<P><STRONG><a name="[fe]"></a>GetMyLocoWorkState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, locoworksta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedTast
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfComSysInfo
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOnceInfo
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostScanDip
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreData
</UL>

<P><STRONG><a name="[10f]"></a>CheckLocoStaTask</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, locoworksta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = CheckLocoStaTask &rArr; ReadLOCO_BK &rArr; GPIO_ReadIoVal &rArr; GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLOCO_BK
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLOCO_ZD
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLOCO_QY
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLOCO_LW
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[151]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_SetTimeOut
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;converUSecToVal
</UL>

<P><STRONG><a name="[41e]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>__c89vsprintf</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, c89vsprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom2
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySet
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displayf
</UL>

<P><STRONG><a name="[28e]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAddDipVal
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadReviseHight
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHostInfo
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFixInfo
</UL>

<P><STRONG><a name="[11f]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom2
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printfcom0
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayString
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySet
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displayf
</UL>

<P><STRONG><a name="[21c]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataSend_CSNR
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSNR_GetData
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreSetModelVal
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SentDatToDip2
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SentDatToDip1
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreCardRec
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCardPage
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHxn5OilBoxModel
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stcModelComplexToMulstcModel
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stcModelComplexTostcModel
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stcModelSempleTostcModelComplex
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stcModelTostcModelComplex
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HdlcRecDeal
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTAX2Info
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecTAX2Bef
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecTAX2Bak
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetModel
</UL>

<P><STRONG><a name="[373]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[41f]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySet
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOrClearValue
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadIoVal
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinselConfig
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlshRecToCardRec
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResumeDisplaySet
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClaerDisplaySet
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDistFram
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCardDensityVal
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixCard
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DensityCard
</UL>

<P><STRONG><a name="[420]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[421]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[422]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[222]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataSend_CSNR
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSNR_RecDealDip
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReadCOM0DataCod
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreData
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSNR_RecDealHostDip
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecTAX2Info
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFixInfo
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSNR_RecDeal
</UL>

<P><STRONG><a name="[423]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[424]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[425]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[395]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[375]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[376]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[377]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[378]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[374]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[46]"></a>_printf_int_dec</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[3e]"></a>_printf_charcount</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[372]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>

<P><STRONG><a name="[37b]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[4e]"></a>_printf_longlong_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[37e]"></a>_printf_longlong_oct</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[4a]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[52]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[37f]"></a>_printf_longlong_hex</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[4c]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[54]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[40]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[37a]"></a>__printf</STRONG> (Thumb, 390 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[426]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[38d]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[427]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[382]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[37d]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[379]"></a>_printf_int_common</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[428]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[388]"></a>_printf_fp_dec_real</STRONG> (Thumb, 628 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[38b]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[56]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[58]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[38c]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[5a]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[5c]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[37c]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[63]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[5e]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[38a]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[384]"></a>_btod_etento</STRONG> (Thumb, 222 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[68]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[6c]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[385]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[391]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[390]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[392]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[393]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[386]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[387]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[394]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[74]"></a>OS_CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(OSKernelschedular))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeSet
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegSet
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegGet
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameGet
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelReq
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemQuery
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQQuery
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemQuery
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameSet
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameGet
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPendGetFlagsRdy
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameSet
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventPendMulti
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameGet
</UL>

<P><STRONG><a name="[76]"></a>OS_CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(OSKernelschedular))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeSet
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegSet
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegGet
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameGet
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelReq
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemQuery
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQQuery
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemQuery
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameSet
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameGet
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPendGetFlagsRdy
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameSet
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventPendMulti
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameGet
</UL>

<P><STRONG><a name="[9c]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(OSKernelschedular), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[7a]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(OSKernelschedular))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[98]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(OSKernelschedular))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[d]"></a>OS_CPU_PendSVHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(OSKernelschedular))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[429]"></a>IntDisAll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(OSKernelschedular), UNUSED)

<P><STRONG><a name="[389]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[380]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[38]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[61]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[398]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[22c]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeDipPrsDif
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDipPrsAvg
</UL>

<P><STRONG><a name="[42a]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[2eb]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMathModelPara
</UL>

<P><STRONG><a name="[396]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[39a]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[397]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[39d]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[22d]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMathModelPara
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeDipPrsDif
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDipPrsAvg
</UL>

<P><STRONG><a name="[399]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[2ea]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMathModelPara
</UL>

<P><STRONG><a name="[39b]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[2f0]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDipMathVal
</UL>

<P><STRONG><a name="[39e]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[3a3]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[24d]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrinfSysInfo
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMathModelPara
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDipMathVal
</UL>

<P><STRONG><a name="[3a1]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[2f2]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDipMathVal
</UL>

<P><STRONG><a name="[3a2]"></a>_fcmpeq</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[2f1]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDipMathVal
</UL>

<P><STRONG><a name="[3a4]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[24f]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrinfSysInfo
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDipMathVal
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReviseHight
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDensityVal
</UL>

<P><STRONG><a name="[3a5]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[2ec]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMathModelPara
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDipMathVal
</UL>

<P><STRONG><a name="[42b]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[14c]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_ExternalInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_InternalInit
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrinfSysInfo
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMathModelPara
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDipMathVal
</UL>

<P><STRONG><a name="[42c]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[2ed]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMathModelPara
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDipMathVal
</UL>

<P><STRONG><a name="[3a6]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[3a9]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[24e]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrinfSysInfo
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDipMathVal
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDensityVal
</UL>

<P><STRONG><a name="[3a7]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[39c]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[3a0]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[14d]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_ExternalInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_InternalInit
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMathModelPara
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDipMathVal
</UL>

<P><STRONG><a name="[3a8]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[2f3]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDipMathVal
</UL>

<P><STRONG><a name="[3aa]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[42]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[79]"></a>OS_SchedNew</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[84]"></a>OS_InitTaskStat</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[89]"></a>OS_InitTaskIdle</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[8a]"></a>OS_InitEventList</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[8c]"></a>OS_InitTCBList</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[90]"></a>OS_InitRdyList</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[8f]"></a>OS_InitMisc</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[a7]"></a>OS_FlagTaskRdy</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
</UL>

<P><STRONG><a name="[ad]"></a>OS_FlagBlock</STRONG> (Thumb, 152 bytes, Stack size 20 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
</UL>

<P><STRONG><a name="[df]"></a>OSTmr_Alloc</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
</UL>

<P><STRONG><a name="[e2]"></a>OSTmr_Free</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
</UL>

<P><STRONG><a name="[e1]"></a>OSTmr_Unlink</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OSTmr_Unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[e7]"></a>OSTmr_Link</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTmr_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[34]"></a>OSTmr_Task</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSTmr_Task &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Link
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_tmr.o(.text)
</UL>
<P><STRONG><a name="[ea]"></a>OSTmr_InitTask</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[138]"></a>set_PinFunc</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, lpc17xx_pinsel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = set_PinFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
</UL>

<P><STRONG><a name="[139]"></a>set_ResistorMode</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, lpc17xx_pinsel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = set_ResistorMode
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
</UL>

<P><STRONG><a name="[13a]"></a>set_OpenDrainMode</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, lpc17xx_pinsel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set_OpenDrainMode
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
</UL>

<P><STRONG><a name="[13b]"></a>setSSPclock</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, lpc17xx_ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = setSSPclock &rArr; CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetPCLK
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
</UL>

<P><STRONG><a name="[14f]"></a>getPClock</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lpc17xx_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = getPClock &rArr; CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetPCLK
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;converUSecToVal
</UL>

<P><STRONG><a name="[150]"></a>converUSecToVal</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, lpc17xx_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = converUSecToVal &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPClock
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
</UL>

<P><STRONG><a name="[158]"></a>converPtrToTimeNum</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lpc17xx_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
</UL>

<P><STRONG><a name="[160]"></a>uart_set_divisors</STRONG> (Thumb, 464 bytes, Stack size 80 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetPCLK
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[175]"></a>WDT_SetTimeOut</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, lpc17xx_wdt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = WDT_SetTimeOut &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_SetPCLKDiv
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_UpdateTimeOut
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Start
</UL>

<P><STRONG><a name="[17b]"></a>GPIO_GetPointer</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lpc17xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_SetMask
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
</UL>

<P><STRONG><a name="[18b]"></a>FIO_HalfWordGetPointer</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordReadValue
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordClearValue
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordSetValue
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordSetMask
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_HalfWordSetDir
</UL>

<P><STRONG><a name="[191]"></a>FIO_ByteGetPointer</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lpc17xx_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteReadValue
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteClearValue
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteSetValue
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteSetMask
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIO_ByteSetDir
</UL>

<P><STRONG><a name="[1bb]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCOM1Bout
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
</UL>

<P><STRONG><a name="[1ba]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uart1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCOM1Bout
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
</UL>

<P><STRONG><a name="[20b]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time3Init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time2Init
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time1Init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time0Init
</UL>

<P><STRONG><a name="[20c]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time3Init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time2Init
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time1Init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time0Init
</UL>

<P><STRONG><a name="[3ab]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[39f]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[37]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[383]"></a>_fp_digits</STRONG> (Thumb, 426 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
